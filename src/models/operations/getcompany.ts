/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetCompanyRequestBody = {
  /**
   * The LinkedIn URL of the company to enrich
   */
  companyUrl?: string | undefined;
  /**
   * The website URL of the company to enrich
   */
  companyWebsiteUrl?: string | undefined;
};

/**
 * GetCompany API successful response
 */
export type GetCompanyResponseBody = {
  company?: components.LinkedInCompany | undefined;
};

/** @internal */
export const GetCompanyRequestBody$inboundSchema: z.ZodType<
  GetCompanyRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  company_url: z.string().optional(),
  company_website_url: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company_url": "companyUrl",
    "company_website_url": "companyWebsiteUrl",
  });
});

/** @internal */
export type GetCompanyRequestBody$Outbound = {
  company_url?: string | undefined;
  company_website_url?: string | undefined;
};

/** @internal */
export const GetCompanyRequestBody$outboundSchema: z.ZodType<
  GetCompanyRequestBody$Outbound,
  z.ZodTypeDef,
  GetCompanyRequestBody
> = z.object({
  companyUrl: z.string().optional(),
  companyWebsiteUrl: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyUrl: "company_url",
    companyWebsiteUrl: "company_website_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCompanyRequestBody$ {
  /** @deprecated use `GetCompanyRequestBody$inboundSchema` instead. */
  export const inboundSchema = GetCompanyRequestBody$inboundSchema;
  /** @deprecated use `GetCompanyRequestBody$outboundSchema` instead. */
  export const outboundSchema = GetCompanyRequestBody$outboundSchema;
  /** @deprecated use `GetCompanyRequestBody$Outbound` instead. */
  export type Outbound = GetCompanyRequestBody$Outbound;
}

export function getCompanyRequestBodyToJSON(
  getCompanyRequestBody: GetCompanyRequestBody,
): string {
  return JSON.stringify(
    GetCompanyRequestBody$outboundSchema.parse(getCompanyRequestBody),
  );
}

export function getCompanyRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetCompanyRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCompanyRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCompanyRequestBody' from JSON`,
  );
}

/** @internal */
export const GetCompanyResponseBody$inboundSchema: z.ZodType<
  GetCompanyResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  company: components.LinkedInCompany$inboundSchema.optional(),
});

/** @internal */
export type GetCompanyResponseBody$Outbound = {
  company?: components.LinkedInCompany$Outbound | undefined;
};

/** @internal */
export const GetCompanyResponseBody$outboundSchema: z.ZodType<
  GetCompanyResponseBody$Outbound,
  z.ZodTypeDef,
  GetCompanyResponseBody
> = z.object({
  company: components.LinkedInCompany$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCompanyResponseBody$ {
  /** @deprecated use `GetCompanyResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetCompanyResponseBody$inboundSchema;
  /** @deprecated use `GetCompanyResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetCompanyResponseBody$outboundSchema;
  /** @deprecated use `GetCompanyResponseBody$Outbound` instead. */
  export type Outbound = GetCompanyResponseBody$Outbound;
}

export function getCompanyResponseBodyToJSON(
  getCompanyResponseBody: GetCompanyResponseBody,
): string {
  return JSON.stringify(
    GetCompanyResponseBody$outboundSchema.parse(getCompanyResponseBody),
  );
}

export function getCompanyResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetCompanyResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCompanyResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCompanyResponseBody' from JSON`,
  );
}
