/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";

/**
 * Filter for job postings based on when they were posted
 */
export const DatePosted = {
  Past24Hours: "Past 24 hours",
  PastWeek: "Past Week",
  PastMonth: "Past Month",
} as const;
/**
 * Filter for job postings based on when they were posted
 */
export type DatePosted = ClosedEnum<typeof DatePosted>;

/**
 * Salary range to filter job postings
 */
export const Salary = {
  Dollar40000Plus: "$40,000+",
  Dollar60000Plus: "$60,000+",
  Dollar80000Plus: "$80,000+",
  Dollar100000Plus: "$100,000+",
  Dollar120000Plus: "$120,000+",
} as const;
/**
 * Salary range to filter job postings
 */
export type Salary = ClosedEnum<typeof Salary>;

/**
 * Job types to filter (e.g., Full-time, Part-time)
 */
export const JobTypes = {
  Contract: "Contract",
  FullTime: "Full-time",
  PartTime: "Part-time",
  Temporary: "Temporary",
  Volunteer: "Volunteer",
} as const;
/**
 * Job types to filter (e.g., Full-time, Part-time)
 */
export type JobTypes = ClosedEnum<typeof JobTypes>;

/**
 * Work types to filter (e.g., Remote, On-site)
 */
export const WorkTypes = {
  OnSite: "On-site",
  Remote: "Remote",
  Hybrid: "Hybrid",
} as const;
/**
 * Work types to filter (e.g., Remote, On-site)
 */
export type WorkTypes = ClosedEnum<typeof WorkTypes>;

export type SearchJobPostingsRequestBody = {
  /**
   * Keywords to search for in job postings
   */
  keywords: string;
  /**
   * Location to filter job postings
   */
  location: string;
  /**
   * Filter for job postings based on when they were posted
   */
  datePosted?: DatePosted | undefined;
  /**
   * Salary range to filter job postings
   */
  salary?: Salary | undefined;
  jobTypes?: Array<JobTypes> | undefined;
  workTypes?: Array<WorkTypes> | undefined;
  companyUids?: Array<string> | undefined;
  /**
   * Page number for pagination (default is 1)
   */
  page?: number | undefined;
};

export type JobPostings = {
  /**
   * URL to the job posting
   */
  url?: string | undefined;
  /**
   * Title of the job
   */
  title?: string | undefined;
  /**
   * Job location
   */
  location?: string | undefined;
  /**
   * Date when the job was posted
   */
  datePosted?: Date | undefined;
  /**
   * Name of the company offering the job
   */
  companyName?: string | undefined;
  /**
   * URL to the company's profile
   */
  companyUrl?: string | undefined;
};

/**
 * SearchJobPostings API successful response
 */
export type SearchJobPostingsResponseBody = {
  jobPostings?: Array<JobPostings> | undefined;
};

/** @internal */
export const DatePosted$inboundSchema: z.ZodNativeEnum<typeof DatePosted> = z
  .nativeEnum(DatePosted);

/** @internal */
export const DatePosted$outboundSchema: z.ZodNativeEnum<typeof DatePosted> =
  DatePosted$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DatePosted$ {
  /** @deprecated use `DatePosted$inboundSchema` instead. */
  export const inboundSchema = DatePosted$inboundSchema;
  /** @deprecated use `DatePosted$outboundSchema` instead. */
  export const outboundSchema = DatePosted$outboundSchema;
}

/** @internal */
export const Salary$inboundSchema: z.ZodNativeEnum<typeof Salary> = z
  .nativeEnum(Salary);

/** @internal */
export const Salary$outboundSchema: z.ZodNativeEnum<typeof Salary> =
  Salary$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Salary$ {
  /** @deprecated use `Salary$inboundSchema` instead. */
  export const inboundSchema = Salary$inboundSchema;
  /** @deprecated use `Salary$outboundSchema` instead. */
  export const outboundSchema = Salary$outboundSchema;
}

/** @internal */
export const JobTypes$inboundSchema: z.ZodNativeEnum<typeof JobTypes> = z
  .nativeEnum(JobTypes);

/** @internal */
export const JobTypes$outboundSchema: z.ZodNativeEnum<typeof JobTypes> =
  JobTypes$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobTypes$ {
  /** @deprecated use `JobTypes$inboundSchema` instead. */
  export const inboundSchema = JobTypes$inboundSchema;
  /** @deprecated use `JobTypes$outboundSchema` instead. */
  export const outboundSchema = JobTypes$outboundSchema;
}

/** @internal */
export const WorkTypes$inboundSchema: z.ZodNativeEnum<typeof WorkTypes> = z
  .nativeEnum(WorkTypes);

/** @internal */
export const WorkTypes$outboundSchema: z.ZodNativeEnum<typeof WorkTypes> =
  WorkTypes$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkTypes$ {
  /** @deprecated use `WorkTypes$inboundSchema` instead. */
  export const inboundSchema = WorkTypes$inboundSchema;
  /** @deprecated use `WorkTypes$outboundSchema` instead. */
  export const outboundSchema = WorkTypes$outboundSchema;
}

/** @internal */
export const SearchJobPostingsRequestBody$inboundSchema: z.ZodType<
  SearchJobPostingsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  keywords: z.string(),
  location: z.string(),
  date_posted: DatePosted$inboundSchema.optional(),
  salary: Salary$inboundSchema.optional(),
  job_types: z.array(JobTypes$inboundSchema).optional(),
  work_types: z.array(WorkTypes$inboundSchema).optional(),
  company_uids: z.array(z.string()).optional(),
  page: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "date_posted": "datePosted",
    "job_types": "jobTypes",
    "work_types": "workTypes",
    "company_uids": "companyUids",
  });
});

/** @internal */
export type SearchJobPostingsRequestBody$Outbound = {
  keywords: string;
  location: string;
  date_posted?: string | undefined;
  salary?: string | undefined;
  job_types?: Array<string> | undefined;
  work_types?: Array<string> | undefined;
  company_uids?: Array<string> | undefined;
  page?: number | undefined;
};

/** @internal */
export const SearchJobPostingsRequestBody$outboundSchema: z.ZodType<
  SearchJobPostingsRequestBody$Outbound,
  z.ZodTypeDef,
  SearchJobPostingsRequestBody
> = z.object({
  keywords: z.string(),
  location: z.string(),
  datePosted: DatePosted$outboundSchema.optional(),
  salary: Salary$outboundSchema.optional(),
  jobTypes: z.array(JobTypes$outboundSchema).optional(),
  workTypes: z.array(WorkTypes$outboundSchema).optional(),
  companyUids: z.array(z.string()).optional(),
  page: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    datePosted: "date_posted",
    jobTypes: "job_types",
    workTypes: "work_types",
    companyUids: "company_uids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchJobPostingsRequestBody$ {
  /** @deprecated use `SearchJobPostingsRequestBody$inboundSchema` instead. */
  export const inboundSchema = SearchJobPostingsRequestBody$inboundSchema;
  /** @deprecated use `SearchJobPostingsRequestBody$outboundSchema` instead. */
  export const outboundSchema = SearchJobPostingsRequestBody$outboundSchema;
  /** @deprecated use `SearchJobPostingsRequestBody$Outbound` instead. */
  export type Outbound = SearchJobPostingsRequestBody$Outbound;
}

/** @internal */
export const JobPostings$inboundSchema: z.ZodType<
  JobPostings,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string().optional(),
  title: z.string().optional(),
  location: z.string().optional(),
  date_posted: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  company_name: z.string().optional(),
  company_url: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "date_posted": "datePosted",
    "company_name": "companyName",
    "company_url": "companyUrl",
  });
});

/** @internal */
export type JobPostings$Outbound = {
  url?: string | undefined;
  title?: string | undefined;
  location?: string | undefined;
  date_posted?: string | undefined;
  company_name?: string | undefined;
  company_url?: string | undefined;
};

/** @internal */
export const JobPostings$outboundSchema: z.ZodType<
  JobPostings$Outbound,
  z.ZodTypeDef,
  JobPostings
> = z.object({
  url: z.string().optional(),
  title: z.string().optional(),
  location: z.string().optional(),
  datePosted: z.date().transform(v => v.toISOString()).optional(),
  companyName: z.string().optional(),
  companyUrl: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    datePosted: "date_posted",
    companyName: "company_name",
    companyUrl: "company_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobPostings$ {
  /** @deprecated use `JobPostings$inboundSchema` instead. */
  export const inboundSchema = JobPostings$inboundSchema;
  /** @deprecated use `JobPostings$outboundSchema` instead. */
  export const outboundSchema = JobPostings$outboundSchema;
  /** @deprecated use `JobPostings$Outbound` instead. */
  export type Outbound = JobPostings$Outbound;
}

/** @internal */
export const SearchJobPostingsResponseBody$inboundSchema: z.ZodType<
  SearchJobPostingsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  job_postings: z.array(z.lazy(() => JobPostings$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "job_postings": "jobPostings",
  });
});

/** @internal */
export type SearchJobPostingsResponseBody$Outbound = {
  job_postings?: Array<JobPostings$Outbound> | undefined;
};

/** @internal */
export const SearchJobPostingsResponseBody$outboundSchema: z.ZodType<
  SearchJobPostingsResponseBody$Outbound,
  z.ZodTypeDef,
  SearchJobPostingsResponseBody
> = z.object({
  jobPostings: z.array(z.lazy(() => JobPostings$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    jobPostings: "job_postings",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchJobPostingsResponseBody$ {
  /** @deprecated use `SearchJobPostingsResponseBody$inboundSchema` instead. */
  export const inboundSchema = SearchJobPostingsResponseBody$inboundSchema;
  /** @deprecated use `SearchJobPostingsResponseBody$outboundSchema` instead. */
  export const outboundSchema = SearchJobPostingsResponseBody$outboundSchema;
  /** @deprecated use `SearchJobPostingsResponseBody$Outbound` instead. */
  export type Outbound = SearchJobPostingsResponseBody$Outbound;
}
