/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as components from "../components/index.js";

export const SearchRoundtripStops = {
  Direct: "Direct",
  OneStop: "1 Stop",
  TwoPlusStops: "2+ Stops",
} as const;
export type SearchRoundtripStops = ClosedEnum<typeof SearchRoundtripStops>;

/**
 * The cabin class filter
 */
export const SearchRoundtripCabinClass = {
  Economy: "economy",
  PremiumEconomy: "premium_economy",
  Business: "business",
  First: "first",
} as const;
/**
 * The cabin class filter
 */
export type SearchRoundtripCabinClass = ClosedEnum<
  typeof SearchRoundtripCabinClass
>;

export type SearchRoundtripRequestBody = {
  /**
   * The origin location of the itinerary
   */
  origin: string;
  /**
   * The destination location of the itinerary
   */
  destination: string;
  /**
   * The departure date of the itinerary. The format has to be YYYY-MM-DD
   */
  departDate: string;
  /**
   * The return date of the itinerary. The format has to be YYYY-MM-DD
   */
  returnDate: string;
  /**
   * The list of filter values for number of stops
   */
  stops?: Array<SearchRoundtripStops> | undefined;
  /**
   * The number of adults for the itinerary
   */
  numAdults?: number | undefined;
  /**
   * The number of children for the itinerary
   */
  numChildren?: number | undefined;
  /**
   * The number of infants for the itinerary
   */
  numInfants?: number | undefined;
  /**
   * The cabin class filter
   */
  cabinClass?: SearchRoundtripCabinClass | undefined;
  /**
   * Boolean to indicate whether to include nearby origin airports in the results or not
   */
  includeOriginNearbyAirports?: boolean | undefined;
  /**
   * Boolean to indicate whether to include nearby destination airports in the results or not
   */
  includeDestinationNearbyAirports?: boolean | undefined;
};

/**
 * SearchRoundtrip API successful response
 */
export type SearchRoundtripResponseBody = {
  itineraries?: Array<components.SkyScannerItinerary> | undefined;
};

/** @internal */
export const SearchRoundtripStops$inboundSchema: z.ZodNativeEnum<
  typeof SearchRoundtripStops
> = z.nativeEnum(SearchRoundtripStops);

/** @internal */
export const SearchRoundtripStops$outboundSchema: z.ZodNativeEnum<
  typeof SearchRoundtripStops
> = SearchRoundtripStops$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchRoundtripStops$ {
  /** @deprecated use `SearchRoundtripStops$inboundSchema` instead. */
  export const inboundSchema = SearchRoundtripStops$inboundSchema;
  /** @deprecated use `SearchRoundtripStops$outboundSchema` instead. */
  export const outboundSchema = SearchRoundtripStops$outboundSchema;
}

/** @internal */
export const SearchRoundtripCabinClass$inboundSchema: z.ZodNativeEnum<
  typeof SearchRoundtripCabinClass
> = z.nativeEnum(SearchRoundtripCabinClass);

/** @internal */
export const SearchRoundtripCabinClass$outboundSchema: z.ZodNativeEnum<
  typeof SearchRoundtripCabinClass
> = SearchRoundtripCabinClass$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchRoundtripCabinClass$ {
  /** @deprecated use `SearchRoundtripCabinClass$inboundSchema` instead. */
  export const inboundSchema = SearchRoundtripCabinClass$inboundSchema;
  /** @deprecated use `SearchRoundtripCabinClass$outboundSchema` instead. */
  export const outboundSchema = SearchRoundtripCabinClass$outboundSchema;
}

/** @internal */
export const SearchRoundtripRequestBody$inboundSchema: z.ZodType<
  SearchRoundtripRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  origin: z.string(),
  destination: z.string(),
  depart_date: z.string(),
  return_date: z.string(),
  stops: z.array(SearchRoundtripStops$inboundSchema).optional(),
  num_adults: z.number().default(1),
  num_children: z.number().default(0),
  num_infants: z.number().default(0),
  cabin_class: SearchRoundtripCabinClass$inboundSchema.optional(),
  include_origin_nearby_airports: z.boolean().default(false),
  include_destination_nearby_airports: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "depart_date": "departDate",
    "return_date": "returnDate",
    "num_adults": "numAdults",
    "num_children": "numChildren",
    "num_infants": "numInfants",
    "cabin_class": "cabinClass",
    "include_origin_nearby_airports": "includeOriginNearbyAirports",
    "include_destination_nearby_airports": "includeDestinationNearbyAirports",
  });
});

/** @internal */
export type SearchRoundtripRequestBody$Outbound = {
  origin: string;
  destination: string;
  depart_date: string;
  return_date: string;
  stops?: Array<string> | undefined;
  num_adults: number;
  num_children: number;
  num_infants: number;
  cabin_class?: string | undefined;
  include_origin_nearby_airports: boolean;
  include_destination_nearby_airports: boolean;
};

/** @internal */
export const SearchRoundtripRequestBody$outboundSchema: z.ZodType<
  SearchRoundtripRequestBody$Outbound,
  z.ZodTypeDef,
  SearchRoundtripRequestBody
> = z.object({
  origin: z.string(),
  destination: z.string(),
  departDate: z.string(),
  returnDate: z.string(),
  stops: z.array(SearchRoundtripStops$outboundSchema).optional(),
  numAdults: z.number().default(1),
  numChildren: z.number().default(0),
  numInfants: z.number().default(0),
  cabinClass: SearchRoundtripCabinClass$outboundSchema.optional(),
  includeOriginNearbyAirports: z.boolean().default(false),
  includeDestinationNearbyAirports: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    departDate: "depart_date",
    returnDate: "return_date",
    numAdults: "num_adults",
    numChildren: "num_children",
    numInfants: "num_infants",
    cabinClass: "cabin_class",
    includeOriginNearbyAirports: "include_origin_nearby_airports",
    includeDestinationNearbyAirports: "include_destination_nearby_airports",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchRoundtripRequestBody$ {
  /** @deprecated use `SearchRoundtripRequestBody$inboundSchema` instead. */
  export const inboundSchema = SearchRoundtripRequestBody$inboundSchema;
  /** @deprecated use `SearchRoundtripRequestBody$outboundSchema` instead. */
  export const outboundSchema = SearchRoundtripRequestBody$outboundSchema;
  /** @deprecated use `SearchRoundtripRequestBody$Outbound` instead. */
  export type Outbound = SearchRoundtripRequestBody$Outbound;
}

/** @internal */
export const SearchRoundtripResponseBody$inboundSchema: z.ZodType<
  SearchRoundtripResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  itineraries: z.array(components.SkyScannerItinerary$inboundSchema).optional(),
});

/** @internal */
export type SearchRoundtripResponseBody$Outbound = {
  itineraries?: Array<components.SkyScannerItinerary$Outbound> | undefined;
};

/** @internal */
export const SearchRoundtripResponseBody$outboundSchema: z.ZodType<
  SearchRoundtripResponseBody$Outbound,
  z.ZodTypeDef,
  SearchRoundtripResponseBody
> = z.object({
  itineraries: z.array(components.SkyScannerItinerary$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchRoundtripResponseBody$ {
  /** @deprecated use `SearchRoundtripResponseBody$inboundSchema` instead. */
  export const inboundSchema = SearchRoundtripResponseBody$inboundSchema;
  /** @deprecated use `SearchRoundtripResponseBody$outboundSchema` instead. */
  export const outboundSchema = SearchRoundtripResponseBody$outboundSchema;
  /** @deprecated use `SearchRoundtripResponseBody$Outbound` instead. */
  export type Outbound = SearchRoundtripResponseBody$Outbound;
}
