/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SearchUsersRequestBody = {
  /**
   * The search query string
   */
  query: string;
  /**
   * The number of results to retrieve
   */
  count?: number | undefined;
};

/**
 * SearchUsers API successful response
 */
export type SearchUsersResponseBody = {
  users?: Array<components.TwitterUser> | undefined;
};

/** @internal */
export const SearchUsersRequestBody$inboundSchema: z.ZodType<
  SearchUsersRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  query: z.string(),
  count: z.number().int().optional(),
});

/** @internal */
export type SearchUsersRequestBody$Outbound = {
  query: string;
  count?: number | undefined;
};

/** @internal */
export const SearchUsersRequestBody$outboundSchema: z.ZodType<
  SearchUsersRequestBody$Outbound,
  z.ZodTypeDef,
  SearchUsersRequestBody
> = z.object({
  query: z.string(),
  count: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchUsersRequestBody$ {
  /** @deprecated use `SearchUsersRequestBody$inboundSchema` instead. */
  export const inboundSchema = SearchUsersRequestBody$inboundSchema;
  /** @deprecated use `SearchUsersRequestBody$outboundSchema` instead. */
  export const outboundSchema = SearchUsersRequestBody$outboundSchema;
  /** @deprecated use `SearchUsersRequestBody$Outbound` instead. */
  export type Outbound = SearchUsersRequestBody$Outbound;
}

export function searchUsersRequestBodyToJSON(
  searchUsersRequestBody: SearchUsersRequestBody,
): string {
  return JSON.stringify(
    SearchUsersRequestBody$outboundSchema.parse(searchUsersRequestBody),
  );
}

export function searchUsersRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<SearchUsersRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchUsersRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchUsersRequestBody' from JSON`,
  );
}

/** @internal */
export const SearchUsersResponseBody$inboundSchema: z.ZodType<
  SearchUsersResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  users: z.array(components.TwitterUser$inboundSchema).optional(),
});

/** @internal */
export type SearchUsersResponseBody$Outbound = {
  users?: Array<components.TwitterUser$Outbound> | undefined;
};

/** @internal */
export const SearchUsersResponseBody$outboundSchema: z.ZodType<
  SearchUsersResponseBody$Outbound,
  z.ZodTypeDef,
  SearchUsersResponseBody
> = z.object({
  users: z.array(components.TwitterUser$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchUsersResponseBody$ {
  /** @deprecated use `SearchUsersResponseBody$inboundSchema` instead. */
  export const inboundSchema = SearchUsersResponseBody$inboundSchema;
  /** @deprecated use `SearchUsersResponseBody$outboundSchema` instead. */
  export const outboundSchema = SearchUsersResponseBody$outboundSchema;
  /** @deprecated use `SearchUsersResponseBody$Outbound` instead. */
  export type Outbound = SearchUsersResponseBody$Outbound;
}

export function searchUsersResponseBodyToJSON(
  searchUsersResponseBody: SearchUsersResponseBody,
): string {
  return JSON.stringify(
    SearchUsersResponseBody$outboundSchema.parse(searchUsersResponseBody),
  );
}

export function searchUsersResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<SearchUsersResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchUsersResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchUsersResponseBody' from JSON`,
  );
}
