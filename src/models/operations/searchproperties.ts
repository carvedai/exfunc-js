/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The status of the listings (e.g., "for_sale", "for_rent")
 */
export const ListingStatus = {
  ForSale: "for_sale",
  ForRent: "for_rent",
  Sold: "sold",
} as const;
/**
 * The status of the listings (e.g., "for_sale", "for_rent")
 */
export type ListingStatus = ClosedEnum<typeof ListingStatus>;

/**
 * The criteria to sort the results (e.g., "newest", "lot_size")
 */
export const SearchPropertiesSortBy = {
  HomesForYou: "homes_for_you",
  RentalPriorityScore: "rental_priority_score",
  PriceHighToLow: "price_high_to_low",
  PriceLowToHigh: "price_low_to_high",
  Newest: "newest",
  Bedrooms: "bedrooms",
  Bathrooms: "bathrooms",
  SquareFeet: "square_feet",
  LotSize: "lot_size",
  YearBuilt: "year_built",
} as const;
/**
 * The criteria to sort the results (e.g., "newest", "lot_size")
 */
export type SearchPropertiesSortBy = ClosedEnum<typeof SearchPropertiesSortBy>;

/**
 * The minimum number of bedrooms
 */
export const MinNumBedrooms = {
  Any: "any",
  Studio: "studio",
  One: "1",
  Two: "2",
  Three: "3",
  Four: "4",
  Five: "5",
} as const;
/**
 * The minimum number of bedrooms
 */
export type MinNumBedrooms = ClosedEnum<typeof MinNumBedrooms>;

/**
 * The maximum number of bedrooms
 */
export const MaxNumBedrooms = {
  Any: "any",
  Studio: "studio",
  One: "1",
  Two: "2",
  Three: "3",
  Four: "4",
  Five: "5",
} as const;
/**
 * The maximum number of bedrooms
 */
export type MaxNumBedrooms = ClosedEnum<typeof MaxNumBedrooms>;

export type SearchPropertiesRequestBody = {
  /**
   * The location to search for properties
   */
  location: string;
  /**
   * The status of the listings (e.g., "for_sale", "for_rent")
   */
  listingStatus: ListingStatus;
  /**
   * The criteria to sort the results (e.g., "newest", "lot_size")
   */
  sortBy?: SearchPropertiesSortBy | undefined;
  /**
   * The page number of results to retrieve
   */
  page?: number | undefined;
  /**
   * The minimum listing price for the properties
   */
  minListingPrice?: number | undefined;
  /**
   * The maximum listing price for the properties
   */
  maxListingPrice?: number | undefined;
  /**
   * The minimum number of bedrooms
   */
  minNumBedrooms?: MinNumBedrooms | undefined;
  /**
   * The maximum number of bedrooms
   */
  maxNumBedrooms?: MaxNumBedrooms | undefined;
};

/**
 * SearchProperties API successful response
 */
export type SearchPropertiesResponseBody = {
  properties?: Array<components.ZillowProperty> | undefined;
};

/** @internal */
export const ListingStatus$inboundSchema: z.ZodNativeEnum<
  typeof ListingStatus
> = z.nativeEnum(ListingStatus);

/** @internal */
export const ListingStatus$outboundSchema: z.ZodNativeEnum<
  typeof ListingStatus
> = ListingStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListingStatus$ {
  /** @deprecated use `ListingStatus$inboundSchema` instead. */
  export const inboundSchema = ListingStatus$inboundSchema;
  /** @deprecated use `ListingStatus$outboundSchema` instead. */
  export const outboundSchema = ListingStatus$outboundSchema;
}

/** @internal */
export const SearchPropertiesSortBy$inboundSchema: z.ZodNativeEnum<
  typeof SearchPropertiesSortBy
> = z.nativeEnum(SearchPropertiesSortBy);

/** @internal */
export const SearchPropertiesSortBy$outboundSchema: z.ZodNativeEnum<
  typeof SearchPropertiesSortBy
> = SearchPropertiesSortBy$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchPropertiesSortBy$ {
  /** @deprecated use `SearchPropertiesSortBy$inboundSchema` instead. */
  export const inboundSchema = SearchPropertiesSortBy$inboundSchema;
  /** @deprecated use `SearchPropertiesSortBy$outboundSchema` instead. */
  export const outboundSchema = SearchPropertiesSortBy$outboundSchema;
}

/** @internal */
export const MinNumBedrooms$inboundSchema: z.ZodNativeEnum<
  typeof MinNumBedrooms
> = z.nativeEnum(MinNumBedrooms);

/** @internal */
export const MinNumBedrooms$outboundSchema: z.ZodNativeEnum<
  typeof MinNumBedrooms
> = MinNumBedrooms$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MinNumBedrooms$ {
  /** @deprecated use `MinNumBedrooms$inboundSchema` instead. */
  export const inboundSchema = MinNumBedrooms$inboundSchema;
  /** @deprecated use `MinNumBedrooms$outboundSchema` instead. */
  export const outboundSchema = MinNumBedrooms$outboundSchema;
}

/** @internal */
export const MaxNumBedrooms$inboundSchema: z.ZodNativeEnum<
  typeof MaxNumBedrooms
> = z.nativeEnum(MaxNumBedrooms);

/** @internal */
export const MaxNumBedrooms$outboundSchema: z.ZodNativeEnum<
  typeof MaxNumBedrooms
> = MaxNumBedrooms$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MaxNumBedrooms$ {
  /** @deprecated use `MaxNumBedrooms$inboundSchema` instead. */
  export const inboundSchema = MaxNumBedrooms$inboundSchema;
  /** @deprecated use `MaxNumBedrooms$outboundSchema` instead. */
  export const outboundSchema = MaxNumBedrooms$outboundSchema;
}

/** @internal */
export const SearchPropertiesRequestBody$inboundSchema: z.ZodType<
  SearchPropertiesRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  location: z.string(),
  listing_status: ListingStatus$inboundSchema,
  sort_by: SearchPropertiesSortBy$inboundSchema.optional(),
  page: z.number().int().optional(),
  min_listing_price: z.number().optional(),
  max_listing_price: z.number().optional(),
  min_num_bedrooms: MinNumBedrooms$inboundSchema.optional(),
  max_num_bedrooms: MaxNumBedrooms$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "listing_status": "listingStatus",
    "sort_by": "sortBy",
    "min_listing_price": "minListingPrice",
    "max_listing_price": "maxListingPrice",
    "min_num_bedrooms": "minNumBedrooms",
    "max_num_bedrooms": "maxNumBedrooms",
  });
});

/** @internal */
export type SearchPropertiesRequestBody$Outbound = {
  location: string;
  listing_status: string;
  sort_by?: string | undefined;
  page?: number | undefined;
  min_listing_price?: number | undefined;
  max_listing_price?: number | undefined;
  min_num_bedrooms?: string | undefined;
  max_num_bedrooms?: string | undefined;
};

/** @internal */
export const SearchPropertiesRequestBody$outboundSchema: z.ZodType<
  SearchPropertiesRequestBody$Outbound,
  z.ZodTypeDef,
  SearchPropertiesRequestBody
> = z.object({
  location: z.string(),
  listingStatus: ListingStatus$outboundSchema,
  sortBy: SearchPropertiesSortBy$outboundSchema.optional(),
  page: z.number().int().optional(),
  minListingPrice: z.number().optional(),
  maxListingPrice: z.number().optional(),
  minNumBedrooms: MinNumBedrooms$outboundSchema.optional(),
  maxNumBedrooms: MaxNumBedrooms$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    listingStatus: "listing_status",
    sortBy: "sort_by",
    minListingPrice: "min_listing_price",
    maxListingPrice: "max_listing_price",
    minNumBedrooms: "min_num_bedrooms",
    maxNumBedrooms: "max_num_bedrooms",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchPropertiesRequestBody$ {
  /** @deprecated use `SearchPropertiesRequestBody$inboundSchema` instead. */
  export const inboundSchema = SearchPropertiesRequestBody$inboundSchema;
  /** @deprecated use `SearchPropertiesRequestBody$outboundSchema` instead. */
  export const outboundSchema = SearchPropertiesRequestBody$outboundSchema;
  /** @deprecated use `SearchPropertiesRequestBody$Outbound` instead. */
  export type Outbound = SearchPropertiesRequestBody$Outbound;
}

export function searchPropertiesRequestBodyToJSON(
  searchPropertiesRequestBody: SearchPropertiesRequestBody,
): string {
  return JSON.stringify(
    SearchPropertiesRequestBody$outboundSchema.parse(
      searchPropertiesRequestBody,
    ),
  );
}

export function searchPropertiesRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<SearchPropertiesRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchPropertiesRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchPropertiesRequestBody' from JSON`,
  );
}

/** @internal */
export const SearchPropertiesResponseBody$inboundSchema: z.ZodType<
  SearchPropertiesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  properties: z.array(components.ZillowProperty$inboundSchema).optional(),
});

/** @internal */
export type SearchPropertiesResponseBody$Outbound = {
  properties?: Array<components.ZillowProperty$Outbound> | undefined;
};

/** @internal */
export const SearchPropertiesResponseBody$outboundSchema: z.ZodType<
  SearchPropertiesResponseBody$Outbound,
  z.ZodTypeDef,
  SearchPropertiesResponseBody
> = z.object({
  properties: z.array(components.ZillowProperty$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchPropertiesResponseBody$ {
  /** @deprecated use `SearchPropertiesResponseBody$inboundSchema` instead. */
  export const inboundSchema = SearchPropertiesResponseBody$inboundSchema;
  /** @deprecated use `SearchPropertiesResponseBody$outboundSchema` instead. */
  export const outboundSchema = SearchPropertiesResponseBody$outboundSchema;
  /** @deprecated use `SearchPropertiesResponseBody$Outbound` instead. */
  export type Outbound = SearchPropertiesResponseBody$Outbound;
}

export function searchPropertiesResponseBodyToJSON(
  searchPropertiesResponseBody: SearchPropertiesResponseBody,
): string {
  return JSON.stringify(
    SearchPropertiesResponseBody$outboundSchema.parse(
      searchPropertiesResponseBody,
    ),
  );
}

export function searchPropertiesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<SearchPropertiesResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchPropertiesResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchPropertiesResponseBody' from JSON`,
  );
}
