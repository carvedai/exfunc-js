/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type StartTaskRequestBody = {
  /**
   * The URL to start navigating from
   */
  url: string;
  /**
   * The natural language objective of the navigation
   */
  objective: string;
};

/**
 * StartTask API successful response
 */
export type StartTaskResponseBody = {
  /**
   * The ID of the navigator task
   */
  taskId?: string | undefined;
};

/** @internal */
export const StartTaskRequestBody$inboundSchema: z.ZodType<
  StartTaskRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
  objective: z.string(),
});

/** @internal */
export type StartTaskRequestBody$Outbound = {
  url: string;
  objective: string;
};

/** @internal */
export const StartTaskRequestBody$outboundSchema: z.ZodType<
  StartTaskRequestBody$Outbound,
  z.ZodTypeDef,
  StartTaskRequestBody
> = z.object({
  url: z.string(),
  objective: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StartTaskRequestBody$ {
  /** @deprecated use `StartTaskRequestBody$inboundSchema` instead. */
  export const inboundSchema = StartTaskRequestBody$inboundSchema;
  /** @deprecated use `StartTaskRequestBody$outboundSchema` instead. */
  export const outboundSchema = StartTaskRequestBody$outboundSchema;
  /** @deprecated use `StartTaskRequestBody$Outbound` instead. */
  export type Outbound = StartTaskRequestBody$Outbound;
}

export function startTaskRequestBodyToJSON(
  startTaskRequestBody: StartTaskRequestBody,
): string {
  return JSON.stringify(
    StartTaskRequestBody$outboundSchema.parse(startTaskRequestBody),
  );
}

export function startTaskRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<StartTaskRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StartTaskRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StartTaskRequestBody' from JSON`,
  );
}

/** @internal */
export const StartTaskResponseBody$inboundSchema: z.ZodType<
  StartTaskResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  task_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "task_id": "taskId",
  });
});

/** @internal */
export type StartTaskResponseBody$Outbound = {
  task_id?: string | undefined;
};

/** @internal */
export const StartTaskResponseBody$outboundSchema: z.ZodType<
  StartTaskResponseBody$Outbound,
  z.ZodTypeDef,
  StartTaskResponseBody
> = z.object({
  taskId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    taskId: "task_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StartTaskResponseBody$ {
  /** @deprecated use `StartTaskResponseBody$inboundSchema` instead. */
  export const inboundSchema = StartTaskResponseBody$inboundSchema;
  /** @deprecated use `StartTaskResponseBody$outboundSchema` instead. */
  export const outboundSchema = StartTaskResponseBody$outboundSchema;
  /** @deprecated use `StartTaskResponseBody$Outbound` instead. */
  export type Outbound = StartTaskResponseBody$Outbound;
}

export function startTaskResponseBodyToJSON(
  startTaskResponseBody: StartTaskResponseBody,
): string {
  return JSON.stringify(
    StartTaskResponseBody$outboundSchema.parse(startTaskResponseBody),
  );
}

export function startTaskResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<StartTaskResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StartTaskResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StartTaskResponseBody' from JSON`,
  );
}
