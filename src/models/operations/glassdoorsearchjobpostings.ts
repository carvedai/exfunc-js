/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Filter for job postings based on when they were posted
 */
export const DatePosted = {
  AnyTime: "Any time",
  Past24Hours: "Past 24 hours",
  Past3Days: "Past 3 days",
  PastWeek: "Past Week",
  PastMonth: "Past Month",
} as const;
/**
 * Filter for job postings based on when they were posted
 */
export type DatePosted = ClosedEnum<typeof DatePosted>;

export type GlassdoorSearchJobPostingsRequestBody = {
  /**
   * The search query for job postings
   */
  query?: string | undefined;
  /**
   * Location to filter job postings
   */
  location?: string | undefined;
  /**
   * Filter for job postings based on when they were posted
   */
  datePosted?: DatePosted | undefined;
  /**
   * Next token for pagination
   */
  nextToken?: string | null | undefined;
};

/**
 * SearchJobPostings API successful response
 */
export type GlassdoorSearchJobPostingsResponseBody = {
  jobPostings?: Array<components.GlassdoorJobPosting> | undefined;
};

/** @internal */
export const DatePosted$inboundSchema: z.ZodNativeEnum<typeof DatePosted> = z
  .nativeEnum(DatePosted);

/** @internal */
export const DatePosted$outboundSchema: z.ZodNativeEnum<typeof DatePosted> =
  DatePosted$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DatePosted$ {
  /** @deprecated use `DatePosted$inboundSchema` instead. */
  export const inboundSchema = DatePosted$inboundSchema;
  /** @deprecated use `DatePosted$outboundSchema` instead. */
  export const outboundSchema = DatePosted$outboundSchema;
}

/** @internal */
export const GlassdoorSearchJobPostingsRequestBody$inboundSchema: z.ZodType<
  GlassdoorSearchJobPostingsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  query: z.string().optional(),
  location: z.string().optional(),
  date_posted: DatePosted$inboundSchema.optional(),
  next_token: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "date_posted": "datePosted",
    "next_token": "nextToken",
  });
});

/** @internal */
export type GlassdoorSearchJobPostingsRequestBody$Outbound = {
  query?: string | undefined;
  location?: string | undefined;
  date_posted?: string | undefined;
  next_token?: string | null | undefined;
};

/** @internal */
export const GlassdoorSearchJobPostingsRequestBody$outboundSchema: z.ZodType<
  GlassdoorSearchJobPostingsRequestBody$Outbound,
  z.ZodTypeDef,
  GlassdoorSearchJobPostingsRequestBody
> = z.object({
  query: z.string().optional(),
  location: z.string().optional(),
  datePosted: DatePosted$outboundSchema.optional(),
  nextToken: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    datePosted: "date_posted",
    nextToken: "next_token",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GlassdoorSearchJobPostingsRequestBody$ {
  /** @deprecated use `GlassdoorSearchJobPostingsRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    GlassdoorSearchJobPostingsRequestBody$inboundSchema;
  /** @deprecated use `GlassdoorSearchJobPostingsRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    GlassdoorSearchJobPostingsRequestBody$outboundSchema;
  /** @deprecated use `GlassdoorSearchJobPostingsRequestBody$Outbound` instead. */
  export type Outbound = GlassdoorSearchJobPostingsRequestBody$Outbound;
}

export function glassdoorSearchJobPostingsRequestBodyToJSON(
  glassdoorSearchJobPostingsRequestBody: GlassdoorSearchJobPostingsRequestBody,
): string {
  return JSON.stringify(
    GlassdoorSearchJobPostingsRequestBody$outboundSchema.parse(
      glassdoorSearchJobPostingsRequestBody,
    ),
  );
}

export function glassdoorSearchJobPostingsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<GlassdoorSearchJobPostingsRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GlassdoorSearchJobPostingsRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GlassdoorSearchJobPostingsRequestBody' from JSON`,
  );
}

/** @internal */
export const GlassdoorSearchJobPostingsResponseBody$inboundSchema: z.ZodType<
  GlassdoorSearchJobPostingsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  job_postings: z.array(components.GlassdoorJobPosting$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "job_postings": "jobPostings",
  });
});

/** @internal */
export type GlassdoorSearchJobPostingsResponseBody$Outbound = {
  job_postings?: Array<components.GlassdoorJobPosting$Outbound> | undefined;
};

/** @internal */
export const GlassdoorSearchJobPostingsResponseBody$outboundSchema: z.ZodType<
  GlassdoorSearchJobPostingsResponseBody$Outbound,
  z.ZodTypeDef,
  GlassdoorSearchJobPostingsResponseBody
> = z.object({
  jobPostings: z.array(components.GlassdoorJobPosting$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    jobPostings: "job_postings",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GlassdoorSearchJobPostingsResponseBody$ {
  /** @deprecated use `GlassdoorSearchJobPostingsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GlassdoorSearchJobPostingsResponseBody$inboundSchema;
  /** @deprecated use `GlassdoorSearchJobPostingsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GlassdoorSearchJobPostingsResponseBody$outboundSchema;
  /** @deprecated use `GlassdoorSearchJobPostingsResponseBody$Outbound` instead. */
  export type Outbound = GlassdoorSearchJobPostingsResponseBody$Outbound;
}

export function glassdoorSearchJobPostingsResponseBodyToJSON(
  glassdoorSearchJobPostingsResponseBody:
    GlassdoorSearchJobPostingsResponseBody,
): string {
  return JSON.stringify(
    GlassdoorSearchJobPostingsResponseBody$outboundSchema.parse(
      glassdoorSearchJobPostingsResponseBody,
    ),
  );
}

export function glassdoorSearchJobPostingsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GlassdoorSearchJobPostingsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GlassdoorSearchJobPostingsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GlassdoorSearchJobPostingsResponseBody' from JSON`,
  );
}
