/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import * as components from "../components/index.js";

/**
 * The type of search
 */
export const Type = {
  Top: "top",
  Photos: "photos",
  Videos: "videos",
  Latest: "latest",
} as const;
/**
 * The type of search
 */
export type Type = ClosedEnum<typeof Type>;

export type SearchTweetsRequestBody = {
  /**
   * The search query string
   */
  query: string;
  /**
   * The type of search
   */
  type?: Type | undefined;
  /**
   * The number of results to retrieve
   */
  count?: number | undefined;
};

/**
 * SearchTweets API successful response
 */
export type SearchTweetsResponseBody = {
  results?: Array<components.Tweet> | undefined;
};

/** @internal */
export const Type$inboundSchema: z.ZodNativeEnum<typeof Type> = z.nativeEnum(
  Type,
);

/** @internal */
export const Type$outboundSchema: z.ZodNativeEnum<typeof Type> =
  Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Type$ {
  /** @deprecated use `Type$inboundSchema` instead. */
  export const inboundSchema = Type$inboundSchema;
  /** @deprecated use `Type$outboundSchema` instead. */
  export const outboundSchema = Type$outboundSchema;
}

/** @internal */
export const SearchTweetsRequestBody$inboundSchema: z.ZodType<
  SearchTweetsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  query: z.string(),
  type: Type$inboundSchema.optional(),
  count: z.number().int().optional(),
});

/** @internal */
export type SearchTweetsRequestBody$Outbound = {
  query: string;
  type?: string | undefined;
  count?: number | undefined;
};

/** @internal */
export const SearchTweetsRequestBody$outboundSchema: z.ZodType<
  SearchTweetsRequestBody$Outbound,
  z.ZodTypeDef,
  SearchTweetsRequestBody
> = z.object({
  query: z.string(),
  type: Type$outboundSchema.optional(),
  count: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchTweetsRequestBody$ {
  /** @deprecated use `SearchTweetsRequestBody$inboundSchema` instead. */
  export const inboundSchema = SearchTweetsRequestBody$inboundSchema;
  /** @deprecated use `SearchTweetsRequestBody$outboundSchema` instead. */
  export const outboundSchema = SearchTweetsRequestBody$outboundSchema;
  /** @deprecated use `SearchTweetsRequestBody$Outbound` instead. */
  export type Outbound = SearchTweetsRequestBody$Outbound;
}

/** @internal */
export const SearchTweetsResponseBody$inboundSchema: z.ZodType<
  SearchTweetsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  results: z.array(components.Tweet$inboundSchema).optional(),
});

/** @internal */
export type SearchTweetsResponseBody$Outbound = {
  results?: Array<components.Tweet$Outbound> | undefined;
};

/** @internal */
export const SearchTweetsResponseBody$outboundSchema: z.ZodType<
  SearchTweetsResponseBody$Outbound,
  z.ZodTypeDef,
  SearchTweetsResponseBody
> = z.object({
  results: z.array(components.Tweet$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchTweetsResponseBody$ {
  /** @deprecated use `SearchTweetsResponseBody$inboundSchema` instead. */
  export const inboundSchema = SearchTweetsResponseBody$inboundSchema;
  /** @deprecated use `SearchTweetsResponseBody$outboundSchema` instead. */
  export const outboundSchema = SearchTweetsResponseBody$outboundSchema;
  /** @deprecated use `SearchTweetsResponseBody$Outbound` instead. */
  export type Outbound = SearchTweetsResponseBody$Outbound;
}
