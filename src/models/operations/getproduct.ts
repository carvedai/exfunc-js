/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetProductRequestBody = {
  /**
   * The ID of the product to retrieve
   */
  productId: string;
  /**
   * The country code for the product
   */
  countryCode?: string | undefined;
};

/**
 * GetProduct API successful response
 */
export type GetProductResponseBody = {
  product?: components.GoogleProduct | undefined;
};

/** @internal */
export const GetProductRequestBody$inboundSchema: z.ZodType<
  GetProductRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  product_id: z.string(),
  country_code: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "product_id": "productId",
    "country_code": "countryCode",
  });
});

/** @internal */
export type GetProductRequestBody$Outbound = {
  product_id: string;
  country_code?: string | undefined;
};

/** @internal */
export const GetProductRequestBody$outboundSchema: z.ZodType<
  GetProductRequestBody$Outbound,
  z.ZodTypeDef,
  GetProductRequestBody
> = z.object({
  productId: z.string(),
  countryCode: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    productId: "product_id",
    countryCode: "country_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProductRequestBody$ {
  /** @deprecated use `GetProductRequestBody$inboundSchema` instead. */
  export const inboundSchema = GetProductRequestBody$inboundSchema;
  /** @deprecated use `GetProductRequestBody$outboundSchema` instead. */
  export const outboundSchema = GetProductRequestBody$outboundSchema;
  /** @deprecated use `GetProductRequestBody$Outbound` instead. */
  export type Outbound = GetProductRequestBody$Outbound;
}

export function getProductRequestBodyToJSON(
  getProductRequestBody: GetProductRequestBody,
): string {
  return JSON.stringify(
    GetProductRequestBody$outboundSchema.parse(getProductRequestBody),
  );
}

export function getProductRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetProductRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProductRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProductRequestBody' from JSON`,
  );
}

/** @internal */
export const GetProductResponseBody$inboundSchema: z.ZodType<
  GetProductResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  product: components.GoogleProduct$inboundSchema.optional(),
});

/** @internal */
export type GetProductResponseBody$Outbound = {
  product?: components.GoogleProduct$Outbound | undefined;
};

/** @internal */
export const GetProductResponseBody$outboundSchema: z.ZodType<
  GetProductResponseBody$Outbound,
  z.ZodTypeDef,
  GetProductResponseBody
> = z.object({
  product: components.GoogleProduct$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProductResponseBody$ {
  /** @deprecated use `GetProductResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetProductResponseBody$inboundSchema;
  /** @deprecated use `GetProductResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetProductResponseBody$outboundSchema;
  /** @deprecated use `GetProductResponseBody$Outbound` instead. */
  export type Outbound = GetProductResponseBody$Outbound;
}

export function getProductResponseBodyToJSON(
  getProductResponseBody: GetProductResponseBody,
): string {
  return JSON.stringify(
    GetProductResponseBody$outboundSchema.parse(getProductResponseBody),
  );
}

export function getProductResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetProductResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProductResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProductResponseBody' from JSON`,
  );
}
