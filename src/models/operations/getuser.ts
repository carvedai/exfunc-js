/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetUserRequestBody = {
  /**
   * The ID of the Twitter user to retrieve
   */
  userId?: string | undefined;
  /**
   * The username of the Twitter user to retrieve
   */
  username?: string | undefined;
};

/**
 * GetUser API successful response
 */
export type GetUserResponseBody = {
  user?: components.TwitterUser | undefined;
};

/** @internal */
export const GetUserRequestBody$inboundSchema: z.ZodType<
  GetUserRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  user_id: z.string().optional(),
  username: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "user_id": "userId",
  });
});

/** @internal */
export type GetUserRequestBody$Outbound = {
  user_id?: string | undefined;
  username?: string | undefined;
};

/** @internal */
export const GetUserRequestBody$outboundSchema: z.ZodType<
  GetUserRequestBody$Outbound,
  z.ZodTypeDef,
  GetUserRequestBody
> = z.object({
  userId: z.string().optional(),
  username: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    userId: "user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUserRequestBody$ {
  /** @deprecated use `GetUserRequestBody$inboundSchema` instead. */
  export const inboundSchema = GetUserRequestBody$inboundSchema;
  /** @deprecated use `GetUserRequestBody$outboundSchema` instead. */
  export const outboundSchema = GetUserRequestBody$outboundSchema;
  /** @deprecated use `GetUserRequestBody$Outbound` instead. */
  export type Outbound = GetUserRequestBody$Outbound;
}

export function getUserRequestBodyToJSON(
  getUserRequestBody: GetUserRequestBody,
): string {
  return JSON.stringify(
    GetUserRequestBody$outboundSchema.parse(getUserRequestBody),
  );
}

export function getUserRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetUserRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUserRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUserRequestBody' from JSON`,
  );
}

/** @internal */
export const GetUserResponseBody$inboundSchema: z.ZodType<
  GetUserResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  user: components.TwitterUser$inboundSchema.optional(),
});

/** @internal */
export type GetUserResponseBody$Outbound = {
  user?: components.TwitterUser$Outbound | undefined;
};

/** @internal */
export const GetUserResponseBody$outboundSchema: z.ZodType<
  GetUserResponseBody$Outbound,
  z.ZodTypeDef,
  GetUserResponseBody
> = z.object({
  user: components.TwitterUser$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUserResponseBody$ {
  /** @deprecated use `GetUserResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetUserResponseBody$inboundSchema;
  /** @deprecated use `GetUserResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetUserResponseBody$outboundSchema;
  /** @deprecated use `GetUserResponseBody$Outbound` instead. */
  export type Outbound = GetUserResponseBody$Outbound;
}

export function getUserResponseBodyToJSON(
  getUserResponseBody: GetUserResponseBody,
): string {
  return JSON.stringify(
    GetUserResponseBody$outboundSchema.parse(getUserResponseBody),
  );
}

export function getUserResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetUserResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUserResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUserResponseBody' from JSON`,
  );
}
