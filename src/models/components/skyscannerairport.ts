/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The airport information
 */
export type SkyScannerAirport = {
  /**
   * The name of the airport
   */
  name?: string | undefined;
  /**
   * The airport code
   */
  displayCode?: string | undefined;
};

/** @internal */
export const SkyScannerAirport$inboundSchema: z.ZodType<
  SkyScannerAirport,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  display_code: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "display_code": "displayCode",
  });
});

/** @internal */
export type SkyScannerAirport$Outbound = {
  name?: string | undefined;
  display_code?: string | undefined;
};

/** @internal */
export const SkyScannerAirport$outboundSchema: z.ZodType<
  SkyScannerAirport$Outbound,
  z.ZodTypeDef,
  SkyScannerAirport
> = z.object({
  name: z.string().optional(),
  displayCode: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    displayCode: "display_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SkyScannerAirport$ {
  /** @deprecated use `SkyScannerAirport$inboundSchema` instead. */
  export const inboundSchema = SkyScannerAirport$inboundSchema;
  /** @deprecated use `SkyScannerAirport$outboundSchema` instead. */
  export const outboundSchema = SkyScannerAirport$outboundSchema;
  /** @deprecated use `SkyScannerAirport$Outbound` instead. */
  export type Outbound = SkyScannerAirport$Outbound;
}

export function skyScannerAirportToJSON(
  skyScannerAirport: SkyScannerAirport,
): string {
  return JSON.stringify(
    SkyScannerAirport$outboundSchema.parse(skyScannerAirport),
  );
}

export function skyScannerAirportFromJSON(
  jsonString: string,
): SafeParseResult<SkyScannerAirport, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SkyScannerAirport$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SkyScannerAirport' from JSON`,
  );
}
