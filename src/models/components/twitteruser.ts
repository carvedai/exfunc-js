/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TwitterUser = {
  /**
   * Unique identifier for the user
   */
  userId?: string | undefined;
  /**
   * The user's username
   */
  username?: string | undefined;
  /**
   * The name of the user
   */
  name?: string | undefined;
  /**
   * A brief description of the user
   */
  description?: string | undefined;
  /**
   * The attached URL on the user's profile page
   */
  url?: string | undefined;
  /**
   * Number of users the user is following
   */
  followingCount?: number | undefined;
  /**
   * Number of followers the user has
   */
  followerCount?: number | undefined;
};

/** @internal */
export const TwitterUser$inboundSchema: z.ZodType<
  TwitterUser,
  z.ZodTypeDef,
  unknown
> = z.object({
  user_id: z.string().optional(),
  username: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  url: z.string().optional(),
  following_count: z.number().int().optional(),
  follower_count: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "user_id": "userId",
    "following_count": "followingCount",
    "follower_count": "followerCount",
  });
});

/** @internal */
export type TwitterUser$Outbound = {
  user_id?: string | undefined;
  username?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  url?: string | undefined;
  following_count?: number | undefined;
  follower_count?: number | undefined;
};

/** @internal */
export const TwitterUser$outboundSchema: z.ZodType<
  TwitterUser$Outbound,
  z.ZodTypeDef,
  TwitterUser
> = z.object({
  userId: z.string().optional(),
  username: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  url: z.string().optional(),
  followingCount: z.number().int().optional(),
  followerCount: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    userId: "user_id",
    followingCount: "following_count",
    followerCount: "follower_count",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TwitterUser$ {
  /** @deprecated use `TwitterUser$inboundSchema` instead. */
  export const inboundSchema = TwitterUser$inboundSchema;
  /** @deprecated use `TwitterUser$outboundSchema` instead. */
  export const outboundSchema = TwitterUser$outboundSchema;
  /** @deprecated use `TwitterUser$Outbound` instead. */
  export type Outbound = TwitterUser$Outbound;
}

export function twitterUserToJSON(twitterUser: TwitterUser): string {
  return JSON.stringify(TwitterUser$outboundSchema.parse(twitterUser));
}

export function twitterUserFromJSON(
  jsonString: string,
): SafeParseResult<TwitterUser, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TwitterUser$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TwitterUser' from JSON`,
  );
}
