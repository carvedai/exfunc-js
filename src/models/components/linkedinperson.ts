/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Experiences = {
  title?: string | null | undefined;
  companyName?: string | undefined;
  startDate?: string | null | undefined;
  endDate?: string | null | undefined;
};

export type LinkedInPerson = {
  /**
   * URL to the person's profile
   */
  url?: string | undefined;
  /**
   * Full name of the person
   */
  name?: string | undefined;
  /**
   * Location of the person
   */
  location?: string | undefined;
  /**
   * Job title of the person
   */
  title?: string | null | undefined;
  /**
   * Name of the company the person works for
   */
  companyName?: string | undefined;
  /**
   * URL to the company profile
   */
  companyUrl?: string | undefined;
  /**
   * List of experiences or previous job roles of the person
   */
  experiences?: Array<Experiences> | undefined;
};

/** @internal */
export const Experiences$inboundSchema: z.ZodType<
  Experiences,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.nullable(z.string()).optional(),
  company_name: z.string().optional(),
  start_date: z.nullable(z.string()).optional(),
  end_date: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "company_name": "companyName",
    "start_date": "startDate",
    "end_date": "endDate",
  });
});

/** @internal */
export type Experiences$Outbound = {
  title?: string | null | undefined;
  company_name?: string | undefined;
  start_date?: string | null | undefined;
  end_date?: string | null | undefined;
};

/** @internal */
export const Experiences$outboundSchema: z.ZodType<
  Experiences$Outbound,
  z.ZodTypeDef,
  Experiences
> = z.object({
  title: z.nullable(z.string()).optional(),
  companyName: z.string().optional(),
  startDate: z.nullable(z.string()).optional(),
  endDate: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    companyName: "company_name",
    startDate: "start_date",
    endDate: "end_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Experiences$ {
  /** @deprecated use `Experiences$inboundSchema` instead. */
  export const inboundSchema = Experiences$inboundSchema;
  /** @deprecated use `Experiences$outboundSchema` instead. */
  export const outboundSchema = Experiences$outboundSchema;
  /** @deprecated use `Experiences$Outbound` instead. */
  export type Outbound = Experiences$Outbound;
}

export function experiencesToJSON(experiences: Experiences): string {
  return JSON.stringify(Experiences$outboundSchema.parse(experiences));
}

export function experiencesFromJSON(
  jsonString: string,
): SafeParseResult<Experiences, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Experiences$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Experiences' from JSON`,
  );
}

/** @internal */
export const LinkedInPerson$inboundSchema: z.ZodType<
  LinkedInPerson,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string().optional(),
  name: z.string().optional(),
  location: z.string().optional(),
  title: z.nullable(z.string()).optional(),
  company_name: z.string().optional(),
  company_url: z.string().optional(),
  experiences: z.array(z.lazy(() => Experiences$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "company_name": "companyName",
    "company_url": "companyUrl",
  });
});

/** @internal */
export type LinkedInPerson$Outbound = {
  url?: string | undefined;
  name?: string | undefined;
  location?: string | undefined;
  title?: string | null | undefined;
  company_name?: string | undefined;
  company_url?: string | undefined;
  experiences?: Array<Experiences$Outbound> | undefined;
};

/** @internal */
export const LinkedInPerson$outboundSchema: z.ZodType<
  LinkedInPerson$Outbound,
  z.ZodTypeDef,
  LinkedInPerson
> = z.object({
  url: z.string().optional(),
  name: z.string().optional(),
  location: z.string().optional(),
  title: z.nullable(z.string()).optional(),
  companyName: z.string().optional(),
  companyUrl: z.string().optional(),
  experiences: z.array(z.lazy(() => Experiences$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    companyName: "company_name",
    companyUrl: "company_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LinkedInPerson$ {
  /** @deprecated use `LinkedInPerson$inboundSchema` instead. */
  export const inboundSchema = LinkedInPerson$inboundSchema;
  /** @deprecated use `LinkedInPerson$outboundSchema` instead. */
  export const outboundSchema = LinkedInPerson$outboundSchema;
  /** @deprecated use `LinkedInPerson$Outbound` instead. */
  export type Outbound = LinkedInPerson$Outbound;
}

export function linkedInPersonToJSON(linkedInPerson: LinkedInPerson): string {
  return JSON.stringify(LinkedInPerson$outboundSchema.parse(linkedInPerson));
}

export function linkedInPersonFromJSON(
  jsonString: string,
): SafeParseResult<LinkedInPerson, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LinkedInPerson$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LinkedInPerson' from JSON`,
  );
}
