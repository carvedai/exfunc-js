/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GoogleNews = {
  /**
   * The title of the news article
   */
  title?: string | undefined;
  /**
   * The URL link to the news article
   */
  link?: string | undefined;
  /**
   * A brief snippet or summary of the news article
   */
  snippet?: string | undefined;
  /**
   * The URL of the photo associated with the news article
   */
  photoUrl?: string | undefined;
  /**
   * The publication date and time in UTC
   */
  publishedDatetimeUtc?: Date | undefined;
  /**
   * The URL of the source website
   */
  sourceUrl?: string | undefined;
  /**
   * The name of the news source
   */
  sourceName?: string | undefined;
};

/** @internal */
export const GoogleNews$inboundSchema: z.ZodType<
  GoogleNews,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.string().optional(),
  link: z.string().optional(),
  snippet: z.string().optional(),
  photo_url: z.string().optional(),
  published_datetime_utc: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  source_url: z.string().optional(),
  source_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "photo_url": "photoUrl",
    "published_datetime_utc": "publishedDatetimeUtc",
    "source_url": "sourceUrl",
    "source_name": "sourceName",
  });
});

/** @internal */
export type GoogleNews$Outbound = {
  title?: string | undefined;
  link?: string | undefined;
  snippet?: string | undefined;
  photo_url?: string | undefined;
  published_datetime_utc?: string | undefined;
  source_url?: string | undefined;
  source_name?: string | undefined;
};

/** @internal */
export const GoogleNews$outboundSchema: z.ZodType<
  GoogleNews$Outbound,
  z.ZodTypeDef,
  GoogleNews
> = z.object({
  title: z.string().optional(),
  link: z.string().optional(),
  snippet: z.string().optional(),
  photoUrl: z.string().optional(),
  publishedDatetimeUtc: z.date().transform(v => v.toISOString()).optional(),
  sourceUrl: z.string().optional(),
  sourceName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    photoUrl: "photo_url",
    publishedDatetimeUtc: "published_datetime_utc",
    sourceUrl: "source_url",
    sourceName: "source_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GoogleNews$ {
  /** @deprecated use `GoogleNews$inboundSchema` instead. */
  export const inboundSchema = GoogleNews$inboundSchema;
  /** @deprecated use `GoogleNews$outboundSchema` instead. */
  export const outboundSchema = GoogleNews$outboundSchema;
  /** @deprecated use `GoogleNews$Outbound` instead. */
  export type Outbound = GoogleNews$Outbound;
}

export function googleNewsToJSON(googleNews: GoogleNews): string {
  return JSON.stringify(GoogleNews$outboundSchema.parse(googleNews));
}

export function googleNewsFromJSON(
  jsonString: string,
): SafeParseResult<GoogleNews, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GoogleNews$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GoogleNews' from JSON`,
  );
}
