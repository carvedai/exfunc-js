/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Categories = {
  title?: string | undefined;
  url?: string | undefined;
};

export type YelpBusiness = {
  /**
   * Unique identifier for the business
   */
  businessId?: string | undefined;
  /**
   * A unique identifier used in the URL for the business
   */
  alias?: string | undefined;
  /**
   * The name of the business
   */
  name?: string | undefined;
  /**
   * The physical address of the business
   */
  address?: string | undefined;
  /**
   * The website URL of the business
   */
  website?: string | undefined;
  /**
   * The link to the business's page on the platform
   */
  businessPageLink?: string | undefined;
  /**
   * List of categories that the business falls under
   */
  categories?: Array<Categories> | undefined;
  /**
   * Average rating of the business
   */
  rating?: number | undefined;
  /**
   * Total number of reviews for the business
   */
  reviewCount?: number | undefined;
  /**
   * Highlights or features of the business
   */
  highlights?: Array<string> | undefined;
  /**
   * The area where the business provides services
   */
  serviceArea?: string | undefined;
  /**
   * List of neighborhoods where the business is located
   */
  neighborhoods?: Array<string> | undefined;
};

/** @internal */
export const Categories$inboundSchema: z.ZodType<
  Categories,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.string().optional(),
  url: z.string().optional(),
});

/** @internal */
export type Categories$Outbound = {
  title?: string | undefined;
  url?: string | undefined;
};

/** @internal */
export const Categories$outboundSchema: z.ZodType<
  Categories$Outbound,
  z.ZodTypeDef,
  Categories
> = z.object({
  title: z.string().optional(),
  url: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Categories$ {
  /** @deprecated use `Categories$inboundSchema` instead. */
  export const inboundSchema = Categories$inboundSchema;
  /** @deprecated use `Categories$outboundSchema` instead. */
  export const outboundSchema = Categories$outboundSchema;
  /** @deprecated use `Categories$Outbound` instead. */
  export type Outbound = Categories$Outbound;
}

export function categoriesToJSON(categories: Categories): string {
  return JSON.stringify(Categories$outboundSchema.parse(categories));
}

export function categoriesFromJSON(
  jsonString: string,
): SafeParseResult<Categories, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Categories$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Categories' from JSON`,
  );
}

/** @internal */
export const YelpBusiness$inboundSchema: z.ZodType<
  YelpBusiness,
  z.ZodTypeDef,
  unknown
> = z.object({
  business_id: z.string().optional(),
  alias: z.string().optional(),
  name: z.string().optional(),
  address: z.string().optional(),
  website: z.string().optional(),
  business_page_link: z.string().optional(),
  categories: z.array(z.lazy(() => Categories$inboundSchema)).optional(),
  rating: z.number().optional(),
  review_count: z.number().int().optional(),
  highlights: z.array(z.string()).optional(),
  service_area: z.string().optional(),
  neighborhoods: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "business_id": "businessId",
    "business_page_link": "businessPageLink",
    "review_count": "reviewCount",
    "service_area": "serviceArea",
  });
});

/** @internal */
export type YelpBusiness$Outbound = {
  business_id?: string | undefined;
  alias?: string | undefined;
  name?: string | undefined;
  address?: string | undefined;
  website?: string | undefined;
  business_page_link?: string | undefined;
  categories?: Array<Categories$Outbound> | undefined;
  rating?: number | undefined;
  review_count?: number | undefined;
  highlights?: Array<string> | undefined;
  service_area?: string | undefined;
  neighborhoods?: Array<string> | undefined;
};

/** @internal */
export const YelpBusiness$outboundSchema: z.ZodType<
  YelpBusiness$Outbound,
  z.ZodTypeDef,
  YelpBusiness
> = z.object({
  businessId: z.string().optional(),
  alias: z.string().optional(),
  name: z.string().optional(),
  address: z.string().optional(),
  website: z.string().optional(),
  businessPageLink: z.string().optional(),
  categories: z.array(z.lazy(() => Categories$outboundSchema)).optional(),
  rating: z.number().optional(),
  reviewCount: z.number().int().optional(),
  highlights: z.array(z.string()).optional(),
  serviceArea: z.string().optional(),
  neighborhoods: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    businessId: "business_id",
    businessPageLink: "business_page_link",
    reviewCount: "review_count",
    serviceArea: "service_area",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace YelpBusiness$ {
  /** @deprecated use `YelpBusiness$inboundSchema` instead. */
  export const inboundSchema = YelpBusiness$inboundSchema;
  /** @deprecated use `YelpBusiness$outboundSchema` instead. */
  export const outboundSchema = YelpBusiness$outboundSchema;
  /** @deprecated use `YelpBusiness$Outbound` instead. */
  export type Outbound = YelpBusiness$Outbound;
}

export function yelpBusinessToJSON(yelpBusiness: YelpBusiness): string {
  return JSON.stringify(YelpBusiness$outboundSchema.parse(yelpBusiness));
}

export function yelpBusinessFromJSON(
  jsonString: string,
): SafeParseResult<YelpBusiness, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => YelpBusiness$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'YelpBusiness' from JSON`,
  );
}
