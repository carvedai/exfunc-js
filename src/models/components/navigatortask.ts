/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RequestT = {
  /**
   * The URL to start navigating from
   */
  url?: string | undefined;
  /**
   * The natural language objective of the navigation
   */
  objective?: string | undefined;
};

export type ResponseT = {
  /**
   * The HTML string of the page that the navigator reached
   */
  html?: string | undefined;
  /**
   * The base64-encoded string for screenshot of the page that the navigator reached
   */
  img?: string | undefined;
  /**
   * The markdown string of the page that the navigator reached
   */
  markdown?: string | undefined;
};

/**
 * The status of the navigator task
 */
export const Status = {
  Pending: "PENDING",
  InProgress: "IN_PROGRESS",
  Succeeded: "SUCCEEDED",
  Failed: "FAILED",
  TimedOut: "TIMED_OUT",
} as const;
/**
 * The status of the navigator task
 */
export type Status = ClosedEnum<typeof Status>;

export type NavigatorTask = {
  /**
   * The ID of the navigator task
   */
  taskId?: string | undefined;
  request?: RequestT | undefined;
  response?: ResponseT | undefined;
  /**
   * The status of the navigator task
   */
  status?: Status | undefined;
  /**
   * The start time of the navigator task
   */
  startTime?: string | undefined;
  /**
   * The end time of the navigator task
   */
  endTime?: string | undefined;
  /**
   * The last updated time of the navigator task
   */
  lastUpdatedTime?: string | undefined;
};

/** @internal */
export const RequestT$inboundSchema: z.ZodType<
  RequestT,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string().optional(),
  objective: z.string().optional(),
});

/** @internal */
export type RequestT$Outbound = {
  url?: string | undefined;
  objective?: string | undefined;
};

/** @internal */
export const RequestT$outboundSchema: z.ZodType<
  RequestT$Outbound,
  z.ZodTypeDef,
  RequestT
> = z.object({
  url: z.string().optional(),
  objective: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestT$ {
  /** @deprecated use `RequestT$inboundSchema` instead. */
  export const inboundSchema = RequestT$inboundSchema;
  /** @deprecated use `RequestT$outboundSchema` instead. */
  export const outboundSchema = RequestT$outboundSchema;
  /** @deprecated use `RequestT$Outbound` instead. */
  export type Outbound = RequestT$Outbound;
}

export function requestToJSON(requestT: RequestT): string {
  return JSON.stringify(RequestT$outboundSchema.parse(requestT));
}

export function requestFromJSON(
  jsonString: string,
): SafeParseResult<RequestT, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RequestT$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RequestT' from JSON`,
  );
}

/** @internal */
export const ResponseT$inboundSchema: z.ZodType<
  ResponseT,
  z.ZodTypeDef,
  unknown
> = z.object({
  html: z.string().optional(),
  img: z.string().optional(),
  markdown: z.string().optional(),
});

/** @internal */
export type ResponseT$Outbound = {
  html?: string | undefined;
  img?: string | undefined;
  markdown?: string | undefined;
};

/** @internal */
export const ResponseT$outboundSchema: z.ZodType<
  ResponseT$Outbound,
  z.ZodTypeDef,
  ResponseT
> = z.object({
  html: z.string().optional(),
  img: z.string().optional(),
  markdown: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseT$ {
  /** @deprecated use `ResponseT$inboundSchema` instead. */
  export const inboundSchema = ResponseT$inboundSchema;
  /** @deprecated use `ResponseT$outboundSchema` instead. */
  export const outboundSchema = ResponseT$outboundSchema;
  /** @deprecated use `ResponseT$Outbound` instead. */
  export type Outbound = ResponseT$Outbound;
}

export function responseToJSON(responseT: ResponseT): string {
  return JSON.stringify(ResponseT$outboundSchema.parse(responseT));
}

export function responseFromJSON(
  jsonString: string,
): SafeParseResult<ResponseT, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseT$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseT' from JSON`,
  );
}

/** @internal */
export const Status$inboundSchema: z.ZodNativeEnum<typeof Status> = z
  .nativeEnum(Status);

/** @internal */
export const Status$outboundSchema: z.ZodNativeEnum<typeof Status> =
  Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Status$ {
  /** @deprecated use `Status$inboundSchema` instead. */
  export const inboundSchema = Status$inboundSchema;
  /** @deprecated use `Status$outboundSchema` instead. */
  export const outboundSchema = Status$outboundSchema;
}

/** @internal */
export const NavigatorTask$inboundSchema: z.ZodType<
  NavigatorTask,
  z.ZodTypeDef,
  unknown
> = z.object({
  task_id: z.string().optional(),
  request: z.lazy(() => RequestT$inboundSchema).optional(),
  response: z.lazy(() => ResponseT$inboundSchema).optional(),
  status: Status$inboundSchema.optional(),
  start_time: z.string().optional(),
  end_time: z.string().optional(),
  last_updated_time: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "task_id": "taskId",
    "start_time": "startTime",
    "end_time": "endTime",
    "last_updated_time": "lastUpdatedTime",
  });
});

/** @internal */
export type NavigatorTask$Outbound = {
  task_id?: string | undefined;
  request?: RequestT$Outbound | undefined;
  response?: ResponseT$Outbound | undefined;
  status?: string | undefined;
  start_time?: string | undefined;
  end_time?: string | undefined;
  last_updated_time?: string | undefined;
};

/** @internal */
export const NavigatorTask$outboundSchema: z.ZodType<
  NavigatorTask$Outbound,
  z.ZodTypeDef,
  NavigatorTask
> = z.object({
  taskId: z.string().optional(),
  request: z.lazy(() => RequestT$outboundSchema).optional(),
  response: z.lazy(() => ResponseT$outboundSchema).optional(),
  status: Status$outboundSchema.optional(),
  startTime: z.string().optional(),
  endTime: z.string().optional(),
  lastUpdatedTime: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    taskId: "task_id",
    startTime: "start_time",
    endTime: "end_time",
    lastUpdatedTime: "last_updated_time",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NavigatorTask$ {
  /** @deprecated use `NavigatorTask$inboundSchema` instead. */
  export const inboundSchema = NavigatorTask$inboundSchema;
  /** @deprecated use `NavigatorTask$outboundSchema` instead. */
  export const outboundSchema = NavigatorTask$outboundSchema;
  /** @deprecated use `NavigatorTask$Outbound` instead. */
  export type Outbound = NavigatorTask$Outbound;
}

export function navigatorTaskToJSON(navigatorTask: NavigatorTask): string {
  return JSON.stringify(NavigatorTask$outboundSchema.parse(navigatorTask));
}

export function navigatorTaskFromJSON(
  jsonString: string,
): SafeParseResult<NavigatorTask, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NavigatorTask$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NavigatorTask' from JSON`,
  );
}
