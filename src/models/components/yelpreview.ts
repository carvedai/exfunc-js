/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type FeedbackCounts = {
  /**
   * Number of users who found the review useful
   */
  useful?: number | undefined;
  /**
   * Number of users who found the review funny
   */
  funny?: number | undefined;
  /**
   * Number of users who found the review cool
   */
  cool?: number | undefined;
};

export type YelpReview = {
  /**
   * Unique identifier for the review
   */
  reviewId?: string | undefined;
  /**
   * Rating given in the review
   */
  rating?: number | undefined;
  /**
   * List of photo URLs associated with the review
   */
  photos?: Array<string> | undefined;
  /**
   * Indicates if the review has been updated
   */
  isUpdated?: boolean | undefined;
  feedbackCounts?: FeedbackCounts | undefined;
  /**
   * Timestamp when the review was created
   */
  createdTime?: Date | undefined;
  /**
   * The content of the review
   */
  text?: string | undefined;
  /**
   * Unique identifier for the review author
   */
  authorId?: string | undefined;
  /**
   * Name of the review author
   */
  authorName?: string | undefined;
  /**
   * Location of the review author
   */
  authorLocation?: string | undefined;
  /**
   * Link to the author's profile
   */
  authorLink?: string | undefined;
  /**
   * Total number of reviews written by the author
   */
  authorReviewCount?: number | undefined;
};

/** @internal */
export const FeedbackCounts$inboundSchema: z.ZodType<
  FeedbackCounts,
  z.ZodTypeDef,
  unknown
> = z.object({
  useful: z.number().int().optional(),
  funny: z.number().int().optional(),
  cool: z.number().int().optional(),
});

/** @internal */
export type FeedbackCounts$Outbound = {
  useful?: number | undefined;
  funny?: number | undefined;
  cool?: number | undefined;
};

/** @internal */
export const FeedbackCounts$outboundSchema: z.ZodType<
  FeedbackCounts$Outbound,
  z.ZodTypeDef,
  FeedbackCounts
> = z.object({
  useful: z.number().int().optional(),
  funny: z.number().int().optional(),
  cool: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeedbackCounts$ {
  /** @deprecated use `FeedbackCounts$inboundSchema` instead. */
  export const inboundSchema = FeedbackCounts$inboundSchema;
  /** @deprecated use `FeedbackCounts$outboundSchema` instead. */
  export const outboundSchema = FeedbackCounts$outboundSchema;
  /** @deprecated use `FeedbackCounts$Outbound` instead. */
  export type Outbound = FeedbackCounts$Outbound;
}

export function feedbackCountsToJSON(feedbackCounts: FeedbackCounts): string {
  return JSON.stringify(FeedbackCounts$outboundSchema.parse(feedbackCounts));
}

export function feedbackCountsFromJSON(
  jsonString: string,
): SafeParseResult<FeedbackCounts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FeedbackCounts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FeedbackCounts' from JSON`,
  );
}

/** @internal */
export const YelpReview$inboundSchema: z.ZodType<
  YelpReview,
  z.ZodTypeDef,
  unknown
> = z.object({
  review_id: z.string().optional(),
  rating: z.number().optional(),
  photos: z.array(z.string()).optional(),
  is_updated: z.boolean().optional(),
  feedback_counts: z.lazy(() => FeedbackCounts$inboundSchema).optional(),
  created_time: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  text: z.string().optional(),
  author_id: z.string().optional(),
  author_name: z.string().optional(),
  author_location: z.string().optional(),
  author_link: z.string().optional(),
  author_review_count: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "review_id": "reviewId",
    "is_updated": "isUpdated",
    "feedback_counts": "feedbackCounts",
    "created_time": "createdTime",
    "author_id": "authorId",
    "author_name": "authorName",
    "author_location": "authorLocation",
    "author_link": "authorLink",
    "author_review_count": "authorReviewCount",
  });
});

/** @internal */
export type YelpReview$Outbound = {
  review_id?: string | undefined;
  rating?: number | undefined;
  photos?: Array<string> | undefined;
  is_updated?: boolean | undefined;
  feedback_counts?: FeedbackCounts$Outbound | undefined;
  created_time?: string | undefined;
  text?: string | undefined;
  author_id?: string | undefined;
  author_name?: string | undefined;
  author_location?: string | undefined;
  author_link?: string | undefined;
  author_review_count?: number | undefined;
};

/** @internal */
export const YelpReview$outboundSchema: z.ZodType<
  YelpReview$Outbound,
  z.ZodTypeDef,
  YelpReview
> = z.object({
  reviewId: z.string().optional(),
  rating: z.number().optional(),
  photos: z.array(z.string()).optional(),
  isUpdated: z.boolean().optional(),
  feedbackCounts: z.lazy(() => FeedbackCounts$outboundSchema).optional(),
  createdTime: z.date().transform(v => v.toISOString()).optional(),
  text: z.string().optional(),
  authorId: z.string().optional(),
  authorName: z.string().optional(),
  authorLocation: z.string().optional(),
  authorLink: z.string().optional(),
  authorReviewCount: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    reviewId: "review_id",
    isUpdated: "is_updated",
    feedbackCounts: "feedback_counts",
    createdTime: "created_time",
    authorId: "author_id",
    authorName: "author_name",
    authorLocation: "author_location",
    authorLink: "author_link",
    authorReviewCount: "author_review_count",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace YelpReview$ {
  /** @deprecated use `YelpReview$inboundSchema` instead. */
  export const inboundSchema = YelpReview$inboundSchema;
  /** @deprecated use `YelpReview$outboundSchema` instead. */
  export const outboundSchema = YelpReview$outboundSchema;
  /** @deprecated use `YelpReview$Outbound` instead. */
  export type Outbound = YelpReview$Outbound;
}

export function yelpReviewToJSON(yelpReview: YelpReview): string {
  return JSON.stringify(YelpReview$outboundSchema.parse(yelpReview));
}

export function yelpReviewFromJSON(
  jsonString: string,
): SafeParseResult<YelpReview, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => YelpReview$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'YelpReview' from JSON`,
  );
}
