/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Salary details for the job posting
 */
export type IndeedJobPostingSalary = {
  currency?: string | null | undefined;
  period?: string | null | undefined;
  percentiles?: { [k: string]: string } | undefined;
};

export type IndeedJobPosting = {
  /**
   * The URL link to the Indeed job posting
   */
  url?: string | undefined;
  /**
   * The title of the job posting
   */
  title?: string | undefined;
  /**
   * The location of the job posting
   */
  location?: string | undefined;
  /**
   * Detailed description of the job posting
   */
  description?: string | undefined;
  /**
   * Type of job (e.g., FULL_TIME, PART_TIME, CONTRACT)
   */
  jobType?: string | null | undefined;
  /**
   * Date when the job was posted
   */
  datePosted?: Date | undefined;
  /**
   * Name of the company offering the job
   */
  companyName?: string | null | undefined;
  /**
   * URL to the company page on Indeed
   */
  companyUrl?: string | null | undefined;
  /**
   * URL to the company's website
   */
  companyWebsiteUrl?: string | null | undefined;
  /**
   * The location of the company
   */
  companyLocation?: string | null | undefined;
  /**
   * The industry of the company
   */
  companyIndustry?: string | null | undefined;
  /**
   * The size range of the company
   */
  companySize?: string | null | undefined;
  /**
   * The revenue (ARR) of the company
   */
  companyRevenue?: string | null | undefined;
  /**
   * The overview of the company
   */
  companyOverview?: string | null | undefined;
  /**
   * Salary details for the job posting
   */
  salary?: IndeedJobPostingSalary | null | undefined;
};

/** @internal */
export const IndeedJobPostingSalary$inboundSchema: z.ZodType<
  IndeedJobPostingSalary,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.nullable(z.string()).optional(),
  period: z.nullable(z.string()).optional(),
  percentiles: z.record(z.string()).optional(),
});

/** @internal */
export type IndeedJobPostingSalary$Outbound = {
  currency?: string | null | undefined;
  period?: string | null | undefined;
  percentiles?: { [k: string]: string } | undefined;
};

/** @internal */
export const IndeedJobPostingSalary$outboundSchema: z.ZodType<
  IndeedJobPostingSalary$Outbound,
  z.ZodTypeDef,
  IndeedJobPostingSalary
> = z.object({
  currency: z.nullable(z.string()).optional(),
  period: z.nullable(z.string()).optional(),
  percentiles: z.record(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IndeedJobPostingSalary$ {
  /** @deprecated use `IndeedJobPostingSalary$inboundSchema` instead. */
  export const inboundSchema = IndeedJobPostingSalary$inboundSchema;
  /** @deprecated use `IndeedJobPostingSalary$outboundSchema` instead. */
  export const outboundSchema = IndeedJobPostingSalary$outboundSchema;
  /** @deprecated use `IndeedJobPostingSalary$Outbound` instead. */
  export type Outbound = IndeedJobPostingSalary$Outbound;
}

export function indeedJobPostingSalaryToJSON(
  indeedJobPostingSalary: IndeedJobPostingSalary,
): string {
  return JSON.stringify(
    IndeedJobPostingSalary$outboundSchema.parse(indeedJobPostingSalary),
  );
}

export function indeedJobPostingSalaryFromJSON(
  jsonString: string,
): SafeParseResult<IndeedJobPostingSalary, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IndeedJobPostingSalary$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IndeedJobPostingSalary' from JSON`,
  );
}

/** @internal */
export const IndeedJobPosting$inboundSchema: z.ZodType<
  IndeedJobPosting,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string().optional(),
  title: z.string().optional(),
  location: z.string().optional(),
  description: z.string().optional(),
  job_type: z.nullable(z.string()).optional(),
  date_posted: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  company_name: z.nullable(z.string()).optional(),
  company_url: z.nullable(z.string()).optional(),
  company_website_url: z.nullable(z.string()).optional(),
  company_location: z.nullable(z.string()).optional(),
  company_industry: z.nullable(z.string()).optional(),
  company_size: z.nullable(z.string()).optional(),
  company_revenue: z.nullable(z.string()).optional(),
  company_overview: z.nullable(z.string()).optional(),
  salary: z.nullable(z.lazy(() => IndeedJobPostingSalary$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "job_type": "jobType",
    "date_posted": "datePosted",
    "company_name": "companyName",
    "company_url": "companyUrl",
    "company_website_url": "companyWebsiteUrl",
    "company_location": "companyLocation",
    "company_industry": "companyIndustry",
    "company_size": "companySize",
    "company_revenue": "companyRevenue",
    "company_overview": "companyOverview",
  });
});

/** @internal */
export type IndeedJobPosting$Outbound = {
  url?: string | undefined;
  title?: string | undefined;
  location?: string | undefined;
  description?: string | undefined;
  job_type?: string | null | undefined;
  date_posted?: string | undefined;
  company_name?: string | null | undefined;
  company_url?: string | null | undefined;
  company_website_url?: string | null | undefined;
  company_location?: string | null | undefined;
  company_industry?: string | null | undefined;
  company_size?: string | null | undefined;
  company_revenue?: string | null | undefined;
  company_overview?: string | null | undefined;
  salary?: IndeedJobPostingSalary$Outbound | null | undefined;
};

/** @internal */
export const IndeedJobPosting$outboundSchema: z.ZodType<
  IndeedJobPosting$Outbound,
  z.ZodTypeDef,
  IndeedJobPosting
> = z.object({
  url: z.string().optional(),
  title: z.string().optional(),
  location: z.string().optional(),
  description: z.string().optional(),
  jobType: z.nullable(z.string()).optional(),
  datePosted: z.date().transform(v => v.toISOString()).optional(),
  companyName: z.nullable(z.string()).optional(),
  companyUrl: z.nullable(z.string()).optional(),
  companyWebsiteUrl: z.nullable(z.string()).optional(),
  companyLocation: z.nullable(z.string()).optional(),
  companyIndustry: z.nullable(z.string()).optional(),
  companySize: z.nullable(z.string()).optional(),
  companyRevenue: z.nullable(z.string()).optional(),
  companyOverview: z.nullable(z.string()).optional(),
  salary: z.nullable(z.lazy(() => IndeedJobPostingSalary$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    jobType: "job_type",
    datePosted: "date_posted",
    companyName: "company_name",
    companyUrl: "company_url",
    companyWebsiteUrl: "company_website_url",
    companyLocation: "company_location",
    companyIndustry: "company_industry",
    companySize: "company_size",
    companyRevenue: "company_revenue",
    companyOverview: "company_overview",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IndeedJobPosting$ {
  /** @deprecated use `IndeedJobPosting$inboundSchema` instead. */
  export const inboundSchema = IndeedJobPosting$inboundSchema;
  /** @deprecated use `IndeedJobPosting$outboundSchema` instead. */
  export const outboundSchema = IndeedJobPosting$outboundSchema;
  /** @deprecated use `IndeedJobPosting$Outbound` instead. */
  export type Outbound = IndeedJobPosting$Outbound;
}

export function indeedJobPostingToJSON(
  indeedJobPosting: IndeedJobPosting,
): string {
  return JSON.stringify(
    IndeedJobPosting$outboundSchema.parse(indeedJobPosting),
  );
}

export function indeedJobPostingFromJSON(
  jsonString: string,
): SafeParseResult<IndeedJobPosting, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IndeedJobPosting$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IndeedJobPosting' from JSON`,
  );
}
