/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GoogleProduct = {
  /**
   * The unique identifier for the product
   */
  productId?: string | undefined;
  /**
   * The title of the product
   */
  title?: string | undefined;
  /**
   * A detailed description of the product
   */
  description?: string | null | undefined;
  /**
   * An array of URLs for the product photos
   */
  photos?: Array<string> | undefined;
  /**
   * A set of attributes for the product, represented as key-value pairs
   */
  attributes?: { [k: string]: string } | null | undefined;
  /**
   * The average rating of the product
   */
  rating?: number | null | undefined;
  /**
   * The URL link to the product page
   */
  pageUrl?: string | undefined;
  /**
   * The total number of reviews for the product
   */
  numReviews?: number | null | undefined;
  /**
   * The number of reviews for each rating level
   */
  reviewsPerRating?: { [k: string]: number } | undefined;
  /**
   * Detailed information about the product
   */
  productDetails?: { [k: string]: string } | undefined;
  /**
   * Technical specifications of the product
   */
  productSpecs?: { [k: string]: string } | undefined;
};

/** @internal */
export const GoogleProduct$inboundSchema: z.ZodType<
  GoogleProduct,
  z.ZodTypeDef,
  unknown
> = z.object({
  product_id: z.string().optional(),
  title: z.string().optional(),
  description: z.nullable(z.string()).optional(),
  photos: z.array(z.string()).optional(),
  attributes: z.nullable(z.record(z.string())).optional(),
  rating: z.nullable(z.number()).optional(),
  page_url: z.string().optional(),
  num_reviews: z.nullable(z.number().int()).optional(),
  reviews_per_rating: z.record(z.number().int()).optional(),
  product_details: z.record(z.string()).optional(),
  product_specs: z.record(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "product_id": "productId",
    "page_url": "pageUrl",
    "num_reviews": "numReviews",
    "reviews_per_rating": "reviewsPerRating",
    "product_details": "productDetails",
    "product_specs": "productSpecs",
  });
});

/** @internal */
export type GoogleProduct$Outbound = {
  product_id?: string | undefined;
  title?: string | undefined;
  description?: string | null | undefined;
  photos?: Array<string> | undefined;
  attributes?: { [k: string]: string } | null | undefined;
  rating?: number | null | undefined;
  page_url?: string | undefined;
  num_reviews?: number | null | undefined;
  reviews_per_rating?: { [k: string]: number } | undefined;
  product_details?: { [k: string]: string } | undefined;
  product_specs?: { [k: string]: string } | undefined;
};

/** @internal */
export const GoogleProduct$outboundSchema: z.ZodType<
  GoogleProduct$Outbound,
  z.ZodTypeDef,
  GoogleProduct
> = z.object({
  productId: z.string().optional(),
  title: z.string().optional(),
  description: z.nullable(z.string()).optional(),
  photos: z.array(z.string()).optional(),
  attributes: z.nullable(z.record(z.string())).optional(),
  rating: z.nullable(z.number()).optional(),
  pageUrl: z.string().optional(),
  numReviews: z.nullable(z.number().int()).optional(),
  reviewsPerRating: z.record(z.number().int()).optional(),
  productDetails: z.record(z.string()).optional(),
  productSpecs: z.record(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    productId: "product_id",
    pageUrl: "page_url",
    numReviews: "num_reviews",
    reviewsPerRating: "reviews_per_rating",
    productDetails: "product_details",
    productSpecs: "product_specs",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GoogleProduct$ {
  /** @deprecated use `GoogleProduct$inboundSchema` instead. */
  export const inboundSchema = GoogleProduct$inboundSchema;
  /** @deprecated use `GoogleProduct$outboundSchema` instead. */
  export const outboundSchema = GoogleProduct$outboundSchema;
  /** @deprecated use `GoogleProduct$Outbound` instead. */
  export type Outbound = GoogleProduct$Outbound;
}

export function googleProductToJSON(googleProduct: GoogleProduct): string {
  return JSON.stringify(GoogleProduct$outboundSchema.parse(googleProduct));
}

export function googleProductFromJSON(
  jsonString: string,
): SafeParseResult<GoogleProduct, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GoogleProduct$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GoogleProduct' from JSON`,
  );
}
