/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type LinkedInJobPosting = {
  /**
   * URL to the job posting
   */
  url?: string | undefined;
  /**
   * Title of the job
   */
  title?: string | undefined;
  /**
   * Job location
   */
  location?: string | undefined;
  /**
   * Detailed description of the job
   */
  description?: string | undefined;
  /**
   * Type of job (e.g., full-time, part-time)
   */
  jobType?: string | undefined;
  /**
   * List of job functions or categories
   */
  jobFunctions?: Array<string> | undefined;
  /**
   * List of industries relevant to the job
   */
  industries?: Array<string> | undefined;
  /**
   * Seniority level of the job (e.g., junior, senior)
   */
  seniorityLevel?: string | undefined;
  /**
   * Number of applicants for the job
   */
  applicants?: number | undefined;
  /**
   * Date when the job was posted
   */
  datePosted?: Date | undefined;
  /**
   * Name of the company offering the job
   */
  companyName?: string | undefined;
  /**
   * URL to the company's profile
   */
  companyUrl?: string | undefined;
};

/** @internal */
export const LinkedInJobPosting$inboundSchema: z.ZodType<
  LinkedInJobPosting,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string().optional(),
  title: z.string().optional(),
  location: z.string().optional(),
  description: z.string().optional(),
  job_type: z.string().optional(),
  job_functions: z.array(z.string()).optional(),
  industries: z.array(z.string()).optional(),
  seniority_level: z.string().optional(),
  applicants: z.number().optional(),
  date_posted: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  company_name: z.string().optional(),
  company_url: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "job_type": "jobType",
    "job_functions": "jobFunctions",
    "seniority_level": "seniorityLevel",
    "date_posted": "datePosted",
    "company_name": "companyName",
    "company_url": "companyUrl",
  });
});

/** @internal */
export type LinkedInJobPosting$Outbound = {
  url?: string | undefined;
  title?: string | undefined;
  location?: string | undefined;
  description?: string | undefined;
  job_type?: string | undefined;
  job_functions?: Array<string> | undefined;
  industries?: Array<string> | undefined;
  seniority_level?: string | undefined;
  applicants?: number | undefined;
  date_posted?: string | undefined;
  company_name?: string | undefined;
  company_url?: string | undefined;
};

/** @internal */
export const LinkedInJobPosting$outboundSchema: z.ZodType<
  LinkedInJobPosting$Outbound,
  z.ZodTypeDef,
  LinkedInJobPosting
> = z.object({
  url: z.string().optional(),
  title: z.string().optional(),
  location: z.string().optional(),
  description: z.string().optional(),
  jobType: z.string().optional(),
  jobFunctions: z.array(z.string()).optional(),
  industries: z.array(z.string()).optional(),
  seniorityLevel: z.string().optional(),
  applicants: z.number().optional(),
  datePosted: z.date().transform(v => v.toISOString()).optional(),
  companyName: z.string().optional(),
  companyUrl: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    jobType: "job_type",
    jobFunctions: "job_functions",
    seniorityLevel: "seniority_level",
    datePosted: "date_posted",
    companyName: "company_name",
    companyUrl: "company_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LinkedInJobPosting$ {
  /** @deprecated use `LinkedInJobPosting$inboundSchema` instead. */
  export const inboundSchema = LinkedInJobPosting$inboundSchema;
  /** @deprecated use `LinkedInJobPosting$outboundSchema` instead. */
  export const outboundSchema = LinkedInJobPosting$outboundSchema;
  /** @deprecated use `LinkedInJobPosting$Outbound` instead. */
  export type Outbound = LinkedInJobPosting$Outbound;
}

export function linkedInJobPostingToJSON(
  linkedInJobPosting: LinkedInJobPosting,
): string {
  return JSON.stringify(
    LinkedInJobPosting$outboundSchema.parse(linkedInJobPosting),
  );
}

export function linkedInJobPostingFromJSON(
  jsonString: string,
): SafeParseResult<LinkedInJobPosting, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LinkedInJobPosting$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LinkedInJobPosting' from JSON`,
  );
}
