/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GoogleJobPosting = {
  /**
   * The ID of the job posting
   */
  id?: string | undefined;
  /**
   * The URL link to the Google job posting
   */
  url?: string | undefined;
  /**
   * The title of the job posting
   */
  title?: string | undefined;
  /**
   * The location of the job posting
   */
  location?: string | undefined;
  /**
   * Detailed description of the job posting
   */
  description?: string | undefined;
  /**
   * Type of job (e.g., Full-time, Part-time)
   */
  jobType?: string | null | undefined;
  /**
   * Date when the job was posted
   */
  datePosted?: Date | null | undefined;
  /**
   * Name of the publisher of the job posting
   */
  publisherName?: string | undefined;
  /**
   * URL of the publisher job posting
   */
  publisherUrl?: string | undefined;
  /**
   * Name of the company offering the job
   */
  companyName?: string | undefined;
  /**
   * URL to the company's website
   */
  companyWebsiteUrl?: string | null | undefined;
};

/** @internal */
export const GoogleJobPosting$inboundSchema: z.ZodType<
  GoogleJobPosting,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  url: z.string().optional(),
  title: z.string().optional(),
  location: z.string().optional(),
  description: z.string().optional(),
  job_type: z.nullable(z.string()).optional(),
  date_posted: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  publisher_name: z.string().optional(),
  publisher_url: z.string().optional(),
  company_name: z.string().optional(),
  company_website_url: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "job_type": "jobType",
    "date_posted": "datePosted",
    "publisher_name": "publisherName",
    "publisher_url": "publisherUrl",
    "company_name": "companyName",
    "company_website_url": "companyWebsiteUrl",
  });
});

/** @internal */
export type GoogleJobPosting$Outbound = {
  id?: string | undefined;
  url?: string | undefined;
  title?: string | undefined;
  location?: string | undefined;
  description?: string | undefined;
  job_type?: string | null | undefined;
  date_posted?: string | null | undefined;
  publisher_name?: string | undefined;
  publisher_url?: string | undefined;
  company_name?: string | undefined;
  company_website_url?: string | null | undefined;
};

/** @internal */
export const GoogleJobPosting$outboundSchema: z.ZodType<
  GoogleJobPosting$Outbound,
  z.ZodTypeDef,
  GoogleJobPosting
> = z.object({
  id: z.string().optional(),
  url: z.string().optional(),
  title: z.string().optional(),
  location: z.string().optional(),
  description: z.string().optional(),
  jobType: z.nullable(z.string()).optional(),
  datePosted: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  publisherName: z.string().optional(),
  publisherUrl: z.string().optional(),
  companyName: z.string().optional(),
  companyWebsiteUrl: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    jobType: "job_type",
    datePosted: "date_posted",
    publisherName: "publisher_name",
    publisherUrl: "publisher_url",
    companyName: "company_name",
    companyWebsiteUrl: "company_website_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GoogleJobPosting$ {
  /** @deprecated use `GoogleJobPosting$inboundSchema` instead. */
  export const inboundSchema = GoogleJobPosting$inboundSchema;
  /** @deprecated use `GoogleJobPosting$outboundSchema` instead. */
  export const outboundSchema = GoogleJobPosting$outboundSchema;
  /** @deprecated use `GoogleJobPosting$Outbound` instead. */
  export type Outbound = GoogleJobPosting$Outbound;
}

export function googleJobPostingToJSON(
  googleJobPosting: GoogleJobPosting,
): string {
  return JSON.stringify(
    GoogleJobPosting$outboundSchema.parse(googleJobPosting),
  );
}

export function googleJobPostingFromJSON(
  jsonString: string,
): SafeParseResult<GoogleJobPosting, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GoogleJobPosting$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GoogleJobPosting' from JSON`,
  );
}
