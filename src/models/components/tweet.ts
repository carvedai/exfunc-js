/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

export type Tweet = {
  /**
   * Unique identifier for the tweet
   */
  tweetId?: string | undefined;
  /**
   * The full text of the tweet
   */
  fullText?: string | undefined;
  /**
   * The timestamp when the tweet was created
   */
  createdAt?: string | undefined;
  /**
   * The ID of the user who authored the tweet
   */
  authorUserId?: string | undefined;
  /**
   * Number of times the tweet has been bookmarked
   */
  bookmarkCount?: number | undefined;
  /**
   * Number of replies to the tweet
   */
  replyCount?: number | undefined;
  /**
   * Number of times the tweet has been retweeted
   */
  retweetCount?: number | undefined;
  /**
   * Indicates if the tweet is a retweet
   */
  retweeted?: boolean | undefined;
  /**
   * List of URLs included in the tweet
   */
  urls?: Array<string> | undefined;
};

/** @internal */
export const Tweet$inboundSchema: z.ZodType<Tweet, z.ZodTypeDef, unknown> = z
  .object({
    tweet_id: z.string().optional(),
    full_text: z.string().optional(),
    created_at: z.string().optional(),
    author_user_id: z.string().optional(),
    bookmark_count: z.number().int().optional(),
    reply_count: z.number().int().optional(),
    retweet_count: z.number().int().optional(),
    retweeted: z.boolean().optional(),
    urls: z.array(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "tweet_id": "tweetId",
      "full_text": "fullText",
      "created_at": "createdAt",
      "author_user_id": "authorUserId",
      "bookmark_count": "bookmarkCount",
      "reply_count": "replyCount",
      "retweet_count": "retweetCount",
    });
  });

/** @internal */
export type Tweet$Outbound = {
  tweet_id?: string | undefined;
  full_text?: string | undefined;
  created_at?: string | undefined;
  author_user_id?: string | undefined;
  bookmark_count?: number | undefined;
  reply_count?: number | undefined;
  retweet_count?: number | undefined;
  retweeted?: boolean | undefined;
  urls?: Array<string> | undefined;
};

/** @internal */
export const Tweet$outboundSchema: z.ZodType<
  Tweet$Outbound,
  z.ZodTypeDef,
  Tweet
> = z.object({
  tweetId: z.string().optional(),
  fullText: z.string().optional(),
  createdAt: z.string().optional(),
  authorUserId: z.string().optional(),
  bookmarkCount: z.number().int().optional(),
  replyCount: z.number().int().optional(),
  retweetCount: z.number().int().optional(),
  retweeted: z.boolean().optional(),
  urls: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    tweetId: "tweet_id",
    fullText: "full_text",
    createdAt: "created_at",
    authorUserId: "author_user_id",
    bookmarkCount: "bookmark_count",
    replyCount: "reply_count",
    retweetCount: "retweet_count",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Tweet$ {
  /** @deprecated use `Tweet$inboundSchema` instead. */
  export const inboundSchema = Tweet$inboundSchema;
  /** @deprecated use `Tweet$outboundSchema` instead. */
  export const outboundSchema = Tweet$outboundSchema;
  /** @deprecated use `Tweet$Outbound` instead. */
  export type Outbound = Tweet$Outbound;
}
