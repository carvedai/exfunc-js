/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Percentiles = {
  p10?: number | undefined;
  p50?: number | undefined;
  p90?: number | undefined;
};

/**
 * Salary details for the job posting
 */
export type Salary = {
  currency?: string | undefined;
  period?: string | undefined;
  percentiles?: Percentiles | undefined;
};

export type GlassdoorJobPosting = {
  /**
   * The URL link to the Glassdoor job posting
   */
  url?: string | undefined;
  /**
   * The title of the job posting
   */
  title?: string | undefined;
  /**
   * The location of the job posting
   */
  location?: string | undefined;
  /**
   * Detailed description of the job posting
   */
  description?: string | undefined;
  /**
   * Date when the job was posted
   */
  datePosted?: Date | undefined;
  /**
   * Name of the company offering the job
   */
  companyName?: string | undefined;
  /**
   * URL to the company page on Glassdoor
   */
  companyUrl?: string | null | undefined;
  /**
   * Salary details for the job posting
   */
  salary?: Salary | null | undefined;
};

/** @internal */
export const Percentiles$inboundSchema: z.ZodType<
  Percentiles,
  z.ZodTypeDef,
  unknown
> = z.object({
  p10: z.number().optional(),
  p50: z.number().optional(),
  p90: z.number().optional(),
});

/** @internal */
export type Percentiles$Outbound = {
  p10?: number | undefined;
  p50?: number | undefined;
  p90?: number | undefined;
};

/** @internal */
export const Percentiles$outboundSchema: z.ZodType<
  Percentiles$Outbound,
  z.ZodTypeDef,
  Percentiles
> = z.object({
  p10: z.number().optional(),
  p50: z.number().optional(),
  p90: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Percentiles$ {
  /** @deprecated use `Percentiles$inboundSchema` instead. */
  export const inboundSchema = Percentiles$inboundSchema;
  /** @deprecated use `Percentiles$outboundSchema` instead. */
  export const outboundSchema = Percentiles$outboundSchema;
  /** @deprecated use `Percentiles$Outbound` instead. */
  export type Outbound = Percentiles$Outbound;
}

export function percentilesToJSON(percentiles: Percentiles): string {
  return JSON.stringify(Percentiles$outboundSchema.parse(percentiles));
}

export function percentilesFromJSON(
  jsonString: string,
): SafeParseResult<Percentiles, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Percentiles$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Percentiles' from JSON`,
  );
}

/** @internal */
export const Salary$inboundSchema: z.ZodType<Salary, z.ZodTypeDef, unknown> = z
  .object({
    currency: z.string().optional(),
    period: z.string().optional(),
    percentiles: z.lazy(() => Percentiles$inboundSchema).optional(),
  });

/** @internal */
export type Salary$Outbound = {
  currency?: string | undefined;
  period?: string | undefined;
  percentiles?: Percentiles$Outbound | undefined;
};

/** @internal */
export const Salary$outboundSchema: z.ZodType<
  Salary$Outbound,
  z.ZodTypeDef,
  Salary
> = z.object({
  currency: z.string().optional(),
  period: z.string().optional(),
  percentiles: z.lazy(() => Percentiles$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Salary$ {
  /** @deprecated use `Salary$inboundSchema` instead. */
  export const inboundSchema = Salary$inboundSchema;
  /** @deprecated use `Salary$outboundSchema` instead. */
  export const outboundSchema = Salary$outboundSchema;
  /** @deprecated use `Salary$Outbound` instead. */
  export type Outbound = Salary$Outbound;
}

export function salaryToJSON(salary: Salary): string {
  return JSON.stringify(Salary$outboundSchema.parse(salary));
}

export function salaryFromJSON(
  jsonString: string,
): SafeParseResult<Salary, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Salary$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Salary' from JSON`,
  );
}

/** @internal */
export const GlassdoorJobPosting$inboundSchema: z.ZodType<
  GlassdoorJobPosting,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string().optional(),
  title: z.string().optional(),
  location: z.string().optional(),
  description: z.string().optional(),
  date_posted: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  company_name: z.string().optional(),
  company_url: z.nullable(z.string()).optional(),
  salary: z.nullable(z.lazy(() => Salary$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "date_posted": "datePosted",
    "company_name": "companyName",
    "company_url": "companyUrl",
  });
});

/** @internal */
export type GlassdoorJobPosting$Outbound = {
  url?: string | undefined;
  title?: string | undefined;
  location?: string | undefined;
  description?: string | undefined;
  date_posted?: string | undefined;
  company_name?: string | undefined;
  company_url?: string | null | undefined;
  salary?: Salary$Outbound | null | undefined;
};

/** @internal */
export const GlassdoorJobPosting$outboundSchema: z.ZodType<
  GlassdoorJobPosting$Outbound,
  z.ZodTypeDef,
  GlassdoorJobPosting
> = z.object({
  url: z.string().optional(),
  title: z.string().optional(),
  location: z.string().optional(),
  description: z.string().optional(),
  datePosted: z.date().transform(v => v.toISOString()).optional(),
  companyName: z.string().optional(),
  companyUrl: z.nullable(z.string()).optional(),
  salary: z.nullable(z.lazy(() => Salary$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    datePosted: "date_posted",
    companyName: "company_name",
    companyUrl: "company_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GlassdoorJobPosting$ {
  /** @deprecated use `GlassdoorJobPosting$inboundSchema` instead. */
  export const inboundSchema = GlassdoorJobPosting$inboundSchema;
  /** @deprecated use `GlassdoorJobPosting$outboundSchema` instead. */
  export const outboundSchema = GlassdoorJobPosting$outboundSchema;
  /** @deprecated use `GlassdoorJobPosting$Outbound` instead. */
  export type Outbound = GlassdoorJobPosting$Outbound;
}

export function glassdoorJobPostingToJSON(
  glassdoorJobPosting: GlassdoorJobPosting,
): string {
  return JSON.stringify(
    GlassdoorJobPosting$outboundSchema.parse(glassdoorJobPosting),
  );
}

export function glassdoorJobPostingFromJSON(
  jsonString: string,
): SafeParseResult<GlassdoorJobPosting, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GlassdoorJobPosting$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GlassdoorJobPosting' from JSON`,
  );
}
