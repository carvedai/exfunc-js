/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { googleGetProduct } from "../funcs/googleGetProduct.js";
import { googleGetProductReviews } from "../funcs/googleGetProductReviews.js";
import { googleSearchNews } from "../funcs/googleSearchNews.js";
import { googleSearchProducts } from "../funcs/googleSearchProducts.js";
import { googleSearchWeb } from "../funcs/googleSearchWeb.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Google extends ClientSDK {
  /**
   * Get product details from Google
   *
   * @remarks
   * Get product details (title, description, rating, etc.) from Google given product ID
   */
  async getProduct(
    request: operations.GetProductRequestBody,
    options?: RequestOptions,
  ): Promise<operations.GetProductResponseBody> {
    return unwrapAsync(googleGetProduct(
      this,
      request,
      options,
    ));
  }

  /**
   * Get product reviews from Google
   *
   * @remarks
   * Get product reviews (title, author, source, rating, etc.) from Google given product ID
   */
  async getProductReviews(
    request: operations.GetProductReviewsRequestBody,
    options?: RequestOptions,
  ): Promise<operations.GetProductReviewsResponseBody> {
    return unwrapAsync(googleGetProductReviews(
      this,
      request,
      options,
    ));
  }

  /**
   * Search news articles on Google
   *
   * @remarks
   * Search news articles on Google for a given query
   */
  async searchNews(
    request: operations.SearchNewsRequestBody,
    options?: RequestOptions,
  ): Promise<operations.SearchNewsResponseBody> {
    return unwrapAsync(googleSearchNews(
      this,
      request,
      options,
    ));
  }

  /**
   * Search products on Google
   *
   * @remarks
   * Search products on Google for a given query
   */
  async searchProducts(
    request: operations.SearchProductsRequestBody,
    options?: RequestOptions,
  ): Promise<operations.SearchProductsResponseBody> {
    return unwrapAsync(googleSearchProducts(
      this,
      request,
      options,
    ));
  }

  /**
   * Search web on Google
   *
   * @remarks
   * Search web on Google for a given query
   */
  async searchWeb(
    request: operations.SearchWebRequestBody,
    options?: RequestOptions,
  ): Promise<operations.SearchWebResponseBody> {
    return unwrapAsync(googleSearchWeb(
      this,
      request,
      options,
    ));
  }
}
